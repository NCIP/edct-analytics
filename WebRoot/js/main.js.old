/*****************************************************************************
* The main "driver script" for the analytics application.
* @author oawofolu
* 
//NOTES
//=============================================================================
// 1) In this application, base variables are used to denote two types of variables:
// a) "independent" variables which are displayed on the charts, and
// b) "filter" variables which are NOT displayed on the charts, but which are included in the filter control
// and may be used for filtering.


/***********************************************/
/** Global Variables */
/***********************************************/
// Custom class package: com.healthcit.*
var sortCount = 0;
var com = { healthcit : new Object() };
var questionId;
var baseUrlString = window.location.pathname;

//Configure number of answers to be shown on each iteration of results	
var globalResultsAtOnce = 4; //columns work better if this number is even
var	showMoreIsHidden = false;

// Variable which keeps track of selected rows in the table of questions
var selectedQuestionsInTable = {};

// Variable which keeps track of the order of the row indexes of the table of questions
// (array containing the current value of "sortedIndexes" in the question table's getSortInfo())
var tableSortedIndexes = null;

// Variables used as flags for checking the state of the DOM
var isReportTableReady = false;

// Variables used to generate reports //
var baseVarArray = new Array();
var baseVarResultSet;
var baseVarResultSetArray = new Array();
var baseVarColumnNames = new Array();
var dependentVarArray = new Array();
var dependentVarResultSet;
var dependentVarResultSetArray = new Array();
var otherContextJoinVarResultSet;
var otherContextJoinVarResultSetArray = new Array();
var otherContextJoinVariables = new Array(); // An array of join variables associated with a join context selection of "Other"
var joinedResultSet;
var groupedResultSet;
var reportVisualizations;
var filterControl;
var aggregationSet = {};
var currentReportType = null;
// Data Types
var NUMERIC_DATA_TYPE = 1;
var STRING_DATA_TYPE = 2;
var BOOLEAN_DATA_TYPE = 3;
// Report Types
var COLUMN_CHART_ID = 1;
var AREA_CHART_ID = 2;
var PIE_CHART_ID = 3;
var LINE_CHART_ID = 4;
var TABLE_ID = 5;
var IMAGE_BAR_CHART_ID = 6;
var IMAGE_AREA_CHART_ID = 7;
var IMAGE_PIE_CHART_ID = 8;
var IMAGE_LINE_CHART_ID = 9;
//Aggregation Types
var nonNumericAggregationTypes =  [ 'count' ];
var numericAggregationTypes = ['sum', 'count', 'avg', 'min', 'max' ];
// Map of questions to data types
var questionDataTypes = new Object();
var PIPES = '||';
// Date Display Options
var dateDisplayOpts = ['full date','month and year only','month and day only','year only','day of week only','month only'];
var dateDisplayOptHovers = ['Leaves the date as is','Example: 04/1990, April 1990','Example: January 1,October 10','Example: 2003, 03','Example: Tuesday, Friday','Example: August, 08'];
var dateFormatOpts = ['month/day/4-digit year (MM/DD/YYYY)','month/day/2-digit year (MM/DD/YY)','month/4-digit year (MM/YYYY)','month/2-digit year (MM/YY)','calendar month,year (MMMM YYYY)','calendar month,day,4-digit year (MMM DD YYYY)','calendar month,day,2-digit year (MMM DD YY)'];
var dateFormatOptHovers = ['Example: 01/01/1990','Example: 01/01/09','Example: 02/2009','Example: 02/09','Example: August 2009','Example: August 10 2009','Example: August 10 09'];
// Primary Visualizations
var primaryVisualizations;
// Secondary Visualizations (NOTE: only enabled in the proprietary plugin)
var secondaryVisualizations;
// Mismatch Error Messages associated with Visualizations (NOTE: overriden in proprietary plugin code)
var visualizationMismatchErrors = null;
// An array of report types for which the current data set can NOT be displayed
var dataMismatchReportTypes = new Array();
// A JSONObject which stores a list of saved queries from the database
var savedReportQueries = null;
// Value of the current saved report id, or null if the current query is not associated with a saved report
var savedReport = null;
//Value of the last saved report id, or null if the current query is not associated with a saved report
var oldSavedReport = null;
// Variable storing the current visualization configuration options
var reportConfigOptions = new Object();
// An array of "special" question fields (fields included in the main table of questions that are actually autogenerated fields)
var autogeneratedQuestionFields = [ 'Module', 'Form' ];
// Hash mapping autogenerated fields to their permissible join contexts
var autogeneratedQuestionFieldJoinContexts = {'Module' : 'module', 'Form' : 'form'};
// An array listing the currently available join contexts from least to most restrictive
var joinContextArray = ['default','module','form'];
// List of all the join columns: "Other"-related join variable (optional), Owner, Module, Form.
var allJoinColumns = new Array();

// Array of answers UI elements
var answers = new Array();
/***********************************************/
/** END Global Variables */
/***********************************************/

//***********************************************/
//** Display of Sections */
//***********************************************/
// Displays welcome section
function navigateToWelcome(){
	// Display a a message overlay
	overlayScreen('Please wait...');	
	simulatedSleep(2000);
	
	// Refresh the screen
	window.location.reload(true);	
	
	// show the Welcome section
	showAnalyticsSection(['welcome_container','welcomeMessageContainer']);
	
	// remove the "Please wait" overlay
	removeOverlayScreen();
	
	// get the full list of saved report queries
	generateAllReportQueries();
}

// Displays Report Generator section
function navigateToCreateReports(){
	showAnalyticsSection(['table_container','selectedQuestionAnswers']);
}

// Display Report Viewing section
function navigateToViewReports(){
	showAnalyticsSection(['reports_container','selectedQuestionAnswers']);
}

function showAnalyticsSection(sections){	
	// show the "Loading" image while the reporting graphic is still loading
	showSpinner('reports_container_spinner');
	// clear the contents of the reports section
	jQuery('div[id^=reports_div_]').empty();
	// clear the contents of the filter controls section and hide the filter control
	jQuery("#filter_container").empty();
	jQuery("#filter_container_wrapper").hide();
	// clear the contents of the reports-controls section
	jQuery("#report_controls").empty();
	jQuery("#report_controls").removeClass('report_controls');
	// update the menu bars as appropriate
	updateMenus( sections );
	// update the submenu bars as appropriate
	updateSubMenus( sections );
	// show the appropriate section and hide the others as appropriate
	doShowHide( sections );
	// generate the analytical reports if the Reports section was selected
	if ( arrayContains(sections,'reports_container') ) generateAnalytics();
}

function doShowHide( sections ) {
	
	if ( sections && sections.length != 0 ){
		var visibleSelectorStr = '';
		var hiddenSelectorStr = '';
		
		for ( var i = 0 ; i < sections.length; ++i ) {
			visibleSelectorStr += '[id!=' + sections[i] + ']';
		}
		jQuery('.container' + visibleSelectorStr + ':visible').toggle(1000);
		jQuery('.container' + visibleSelectorStr).slideUp();
			
		for ( var i = 0 ; i < sections.length; ++i ) {
			jQuery('.container[id=' + sections[i] + ']:hidden').toggle(1000);
		}
	}
}
//***********************************************/
// END Display of Sections */
//***********************************************/

//***********************************************/
/* Utility Methods for Menu Bars */
//***********************************************/
function updateMenus( sections ) {
	// find the value of the element Id to be highlighted as the current tab
	var menuId = findCurrentMenuTab( sections );
	
	// if the element Id was found then set it up as the current menu item
	if ( menuId ) setAsCurrentMenuTab( menuId, 'menu_container' );
}

/* Utility Methods for SubMenu Bars */
function updateSubMenus( sections ){
	// Hash which maps each primary menu tab to a list of submenu options
	var subMenuHash = { 'table_container' : [ {'list_questions_tab':'List Questions'},
	                                              {'list_table_questions_tab':'List Tables'} ]};
		
	// find the currently selected menu item
	var menuId = findCurrentMenuTab( sections );	
	var hasSubMenu = menuId ? subMenuHash[menuId] : false;
	if ( hasSubMenu ) {
		// set up the submenu list
		var subMenuList = subMenuHash[menuId]; 
		var subMenuHtml = '';
		var subMenuId = '';
		subMenuHtml += '<div class="tabs">';
		for ( var i = 0 ; i < subMenuList.length; ++i ) {
			for ( var elmId in subMenuList[i] ){
				subMenuHtml += '<span id="'+elmId+'"';
				subMenuHtml += (i==0 ? ' class="current" ' : '');
				subMenuHtml += '>' + subMenuList[i][elmId] +'</span>';
				if ( i==0 ) subMenuId = elmId;
			}
		}	
		subMenuHtml += '</div>';
		jQuery('#submenu_container').html(subMenuHtml);
		
		// set the current submenu selection
		setAsCurrentMenuTab( subMenuId, 'submenu_container' );
	} else{
		jQuery('#submenu_container').html('');
	}
}

/*Utility Method to find the currently selected menu item*/
function findCurrentMenuTab( sections ) {
	for ( var i = 0; i < sections.length; ++i ) {
		if (jQuery('#' + sections[i] + '_tab')) {
			return sections[i];
		} 
	}
}

// Method which sets up the currently selected menu tab
function setAsCurrentMenuTab(divId,menuStyleClass) {
	jQuery('#' + divId + '_tab').siblings().removeClass('current');
	jQuery('.'+menuStyleClass+' a[id=' + divId + '_tab]').addClass('current');
	// if the current tab is in the Reports section, then update the Reports header caption appropriately
	var isInReportsSection = (divId.indexOf('reportType')>-1);
	if ( isInReportsSection ) {
		var currentMenuTabTitle = jQuery('#'+divId + '_tab').html();
		if ( currentMenuTabTitle ){
			currentMenuTabTitle = currentMenuTabTitle.toUpperCase();
			jQuery(".reportsHeaderBanner span.currentTabTitle").remove();
			jQuery(".reportsHeaderBanner").prepend("<span class=\"currentTabTitle\">" + currentMenuTabTitle + "</span>");
		}
	}
}
//***********************************************/
//END Utility Methods for Menu Bars
//***********************************************/

/***********************************************/
/** Populate Questions */
/***********************************************/
function preHandleCallback() {
  // show the "Loading" image while the reporting graphic is still loading
  showSpinner('table_container_spinner');
  
  // prepare all objects that will be required before running the query that generates questions
  var query = new google.visualization.Query(baseUrlString + 'caHopeDS?viewName=GetQuestionDataType&group=true&orderedColumnNames=QId,DType,QTotal&numericDataType=QTotal');
  query.setQuery('select QId,DType,QTotal');					  
  query.send(preHandleCallbackResponse);					  
}  		

function preHandleCallbackResponse(response) {
	if (response.isError()) {
	  jAlert('Error in query: ' + response.getMessage() + ' ' + response.getDetailedMessage());
	  return;
    }

	var data  = response.getDataTable();
	
	for ( var num = 0; num < data.getNumberOfRows(); ++num ){
		var qId = data.getValue(num,0);
		var datatype = data.getValue(num,1);
		var total = data.getValue(num,2);
		questionDataTypes[qId + PIPES + datatype] = total;
	}
  
    var query = new google.visualization.Query(baseUrlString + 'caHopeDS?viewName=GetAllQuestions&group=true&orderedColumnNames=Id,ShortName,Text');
	query.setQuery('select Id, ShortName, Text');					  
    query.send(handleQueryResponse);					  
} 
			  
function handleQueryResponse(response) {
    if (response.isError()) {
	  jAlert('Error in query: ' + response.getMessage() + ' ' + response.getDetailedMessage());
	  return;
    }

    var data  = response.getDataTable();	
    
    var formatter = new google.visualization.PatternFormat(
    	"<a name=\"anchor_{0}\"></a>" +
    	"<input class=\"shortNameToggle\" type=\"checkbox\" id=\"check_{0}\"" + 
    	"onclick=\"addAnswersBlock('{0}')\" value=\"{1}\"/>&nbsp;" +
    	"{1}<span id=\"spinner_{0}\" class=\"spinner\" style=\"display:none;\">&nbsp;&nbsp;</span><br/><div id=\"div_{0}\"></div>");
    
    formatter.format( data, [0,1], 1 );
    
    var view = new google.visualization.DataView(data);
	
	view.setColumns([1,2,{calc:generateRightColumn, type:'number', id:'test'} ]);
	
	//needed to set class on right column so it can be hidden until needed
	function generateRightColumn(dataTable, rowNum){
		return "<div id=\"right_"+dataTable.getValue(rowNum, 0)+"\"></div>";
	}
	
	var reportTable = new google.visualization.Table($("table_container_content"));
	
	//~~~~~~~~~~~~~Implement Event Listeners~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//custom sort event to disable sorting on 3rd column
	google.visualization.events.addListener(reportTable, 'sort',function(event) {
			var upDownArrow = "&#9650;";
			
			//global variable incremented to determine if sorting ascending or descending
			sortCount ++;
			var ascDesc = (sortCount % 2 ==0)
			if(ascDesc) upDownArrow = "&#9660;";
			
			// Sort the table
			updateHtmlForQuestionsTableSort(reportTable,data,view,event,ascDesc,upDownArrow);
	});
	// event which will signal when the table is fully loaded
	google.visualization.events.addListener(reportTable, 'ready', function(event){
		isReportTableReady = true;
		// Execute the most recently clicked query, if any
		generateSelectedSavedReport();
	});
	//~~~~~~~~~~~~~END Implement Event Listeners~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	//~~~~~~~~~~~~~Draw the table~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	reportTable.draw(view,{sort:"event",allowHtml:true,showRowNumber:false,cssClassNames:{hoverTableRow:'noBackground',selectedTableRow:'noBackground',headerRow:'reportsTableHeader', headerCell:'reportsTableHeaderCell'}});
		//no other way to hide header for third column and give appropriate title
	jQuery(".google-visualization-table-table .reportsTableHeader td:last").hide();
	// hide the spinner
	hideSpinner('table_container_spinner');
	
	//build search bar since table is now in place
	// showSearchBoxes('table_container_content','table_container');
	
}

/**
 * This function updates the content of the table when it is sorted
 * 
 * 
 * NOTE: Bug fix: Currently, sorting the rows causes the original content of selected/modified rows to be lost
 * To fix this, we store the original contents of the rows that have been selected so that they can be updated later
 */
function updateHtmlForQuestionsTableSort(reportTable,data,view,event,ascDesc,upDownArrow) {
	// Get all rows which have questions selected
	var elms = jQuery('input[id^=check_]:checked').parentsUntil('tr').parent();	
	
	// For each question, determine the HTML content of the row in the unsorted version of the table
	// by looking up its value in the current version of the table
	// and using it to map the row in the unsorted table to its correct html content
	elms.each( function(){ 
		var elm = jQuery(this);
		var sortedIndex = jQuery('table.google-visualization-table-table tr').index(elm)-1;
		var unsortedIndex = tableSortedIndexes ? tableSortedIndexes[ sortedIndex ] : sortedIndex;
		var htmlString = elm.htmlWithFormElementValues();
		selectedQuestionsInTable[unsortedIndex+''] = htmlString;
	});
		
	// reset the order of the rows in the table
	tableSortedIndexes = data.getSortedRows([{column: view.getTableColumnIndex(event.column), desc: ascDesc}]);
	view.setRows(tableSortedIndexes);
	reportTable.draw(view,{
		sort:"event",allowHtml:true,showRowNumber:false,cssClassNames:{hoverTableRow:'noBackground',selectedTableRow:'noBackground',headerRow:'reportsTableHeader', headerCell:'reportsTableHeaderCell'}
	});
		
	
	// Now, update the content of the rows that have selected questions
	// by mapping their current indexes to the "unsorted" index equivalent
	// and getting the HTML associated with the "unsorted" index (stored in the "selectedQuestionsInTable" object)
	for ( var unsortedIndex in selectedQuestionsInTable ) {
		var htmlString = selectedQuestionsInTable[unsortedIndex];
		var sortedIndex = jQuery.inArray(parseInt(unsortedIndex),tableSortedIndexes) + 2; // Add 2; 1 to exclude the header row, +1 because the nth-child JQuery selector is 1-based
		var sortedIndexRow = jQuery('table.google-visualization-table-table tr:nth-child(' + sortedIndex + ')');
		sortedIndexRow.html(htmlString);
	}
	
	// Make any final updates to restore anything that the table visualization may have lost
	// during the sort:
	
	// Show or hide the "Answers" column header as appropriate
	showHideAnswersColumnHeader();
	
	// Add the sorting (up/down arrow)
	jQuery(".google-visualization-table-table .reportsTableHeader td:eq("+event.column+") span").html(upDownArrow);
	
}
// end POPULATE QUESTIONS
/***********************************************/
/** Select a Question
/***********************************************/
function selectQuestion(qId){
	// set the "checked" attribute
	jQuery('#check_'+qId).attr('checked',true);
	
	// add the associated Answers block
	addAnswersBlock(qId);
}

/***********************************************/
/** Deselect a Question
/***********************************************/
function deselectQuestion(qId){
	// set the "checked" attribute
	jQuery('#check_'+qId).attr('checked',false);
	
	// add the associated Answers block
	addAnswersBlock(qId);
}

/***********************************************/
/** Populate Answers
/***********************************************/
function addAnswersBlock(qId){  
  // (Enhancement) In some cases, there could be multiple question checkboxes with the same question ID;
  // before proceeding, handle duplicates as appropriate
  if ( hasDuplicateQuestion( qId ) ) {
	  var duplicatesResolved = resolveDuplicateQuestions( qId );
	  // If the duplicates could not be resolved, 
	  // then it means that user action is required to proceed,
	  // so exit
	  if ( !duplicatesResolved ) return;
  }
  // whether or not this question was selected
  var isQIdSelected = ( jQuery('#check_'+qId).is(':checked') );
  if ( isQIdSelected ){ // the question checkbox was selected
	  // show the spinner
	  showSpinner( 'spinner_' + qId );	  
	  	  
	  // show the Independent/Dependent/Filter dropdown
	  showOrHideById('selectdiv_'+qId,1);
	  
	  //show 3rd column and filters
	  jQuery(".reportsTableHeader td:last").html("Answers").show();
	  jQuery("#right_"+qId).parent().show();
	  jQuery("#right_"+qId).show();
	  	  
	  // hide or show all answer checkboxes for this question
	  // based on the value of the independent/dependent/filter dropdown
	  showOrHideAnswerCheckboxes(qId);
	  
	  // handle More/Less Answers' links appropriately
	  handleMoreAndLessAnswerLinks(qId,'show');
	
	  // If the answers have already been displayed for this question but they are merely hidden,
	  // then show the answers;
      // else build a CouchDB query for the answers to this question
	  if ( jQuery('#answers_'+ qId).val() == undefined ){
		  executeQueryForAnswers(0, qId);
	  }
	  else {
		  displayAnswersForQuestion( qId );
	  }
	  
	  //style third column
	  jQuery(".google-visualization-table-table tr .google-visualization-table-td-number").css("display", "table-cell");
	  
  }
  else{ // the question checkbox was deselected
	// handle More/Less Answers' links appropriately
	handleMoreAndLessAnswerLinks(qId,'hide');

	// hide the Independent/Dependent/Filter dropdown
	showOrHideById('selectdiv_'+qId,2);
		
	//hide 3rd column if all hidden
	if(jQuery(".shortNameToggle:checked").length==0){
		jQuery(".google-visualization-table-table tr .google-visualization-table-td-number").css("display", "none");
		jQuery(".reportsTableHeader td:last").html("Answers").slideUp();
	}
	// uncheck all answer checkboxes
	jQuery('#answers_'+qId+' div input[type=checkbox]:checked').attr('checked',false);
	
	// hide the set of answers
	showOrHideById('answers_'+qId, 2, 1400);
	  
	// update the answers confirmation box    
	updateConfirmationBox(qId,'check_'+qId);
	  
	// Reset the IDs of duplicate questions, as appropriate
	removeTemporarySuffixesFromDuplicateQuestions( qId );
  }  
  

  // (Bug fix) Ensure that the focus stays around the clicked checkbox;
  // the screen should not scroll to the top of the page unnecessarily.
  var isLastQuestionSelected = jQuery('input[id^=check_]:checked').length == ( isQIdSelected ? 1 : 0 );
  if ( isLastQuestionSelected ) resetScrollPosition('anchor_'+qId);
}

// Function which shows or hides the Answers column depending on
// whether any questions are selected
function showHideAnswersColumnHeader(){
	if(jQuery(".shortNameToggle:checked").length==0){
		jQuery(".reportsTableHeader td:last").html("Answers").slideUp();
	}
	else {
		jQuery(".reportsTableHeader td:last").html("Answers").show();
	}
}

function resetScrollPosition(anchor){
	// Set the "hash" property of the location so that the page scrolls to the given anchor
	goToQuestionAnchor(anchor);
	
	// If no questions are selected, then set the scrollbar to move to the top of the table of questions
	var noQuestionsSelected = jQuery('input[id^=check]:checked').length == 0;
	if ( noQuestionsSelected ) jQuery('#table_container').animate({scrollTop:0},200);
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//This function resolves the issue of selecting a question
// with duplicates
// by preventing the user from being able to select more than one 
// of the duplicate questions at a time.
// Also, currently the DOM IDs of the duplicate questions are the same, 
// which poses a problem since the questions are processed by ID.
// This is resolved by temporarily resetting the IDs of the non-selected
// duplicates once one is selected,
// and setting them back to their original IDs once it is deselected.
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function resolveDuplicateQuestions(qId){
	// The prefix of the question checkboxes
	var prefix = 'check_';
	
	// The ID of the original question checkbox
	var qIdOriginalCheckboxId = prefix + qId;
	
	// Get the number of duplicates that were selected
	var numSelected = jQuery('[id^=' + qIdOriginalCheckboxId + ']:checked').length;
	
	// Get the ID of the last selected question:
	// Since we assume that only one duplicate will be selected at a time,
	// we can assume that:
	// - if more than 1 is selected then the ID will have a suffix,
	// - if only 1 is selected then it won't have a suffix,
	// - if none are selected then the ID will be null.
	var qIdCheckboxId;
	if ( numSelected > 1 ) qIdCheckboxId = jQuery('[id^=' + qIdOriginalCheckboxId + '][id!=' + qIdOriginalCheckboxId + ']').attr('id');
	else if ( numSelected == 1) qIdCheckboxId = qIdOriginalCheckboxId;
	else qIdCheckboxId = 'DUMMYID';	
		
	// Get the value of the selected question
	var qIdValue = jQuery('[id=' + qIdCheckboxId + ']:checked').val();
	
	// Determine whether or not this question was checked
	var wasQuestionChecked = !!qIdValue;	

	// Get the list of duplicate questions whose IDs need to be reset
	var duplicatesToReset;
	if ( wasQuestionChecked ){ // means this question was checked
		duplicatesToReset = jQuery('[id^=' + qIdOriginalCheckboxId + '][value!=' + qIdValue + ']');
		if ( duplicatesToReset.filter(':checked').length > 0 ) {
			// If there is another duplicate question that was previously checked,
			// then alert the user that all duplicate questions should be removed from the query first.
			var alertMsg = 'You have previously selected a duplicate of this question with a different shortname: ';
			alertMsg +=  '<br/><br/><b>' + duplicatesToReset.filter(':checked').val() + '</b><br/>';
			alertMsg += '<br/>To select this question, you must deselect the duplicates first.';
			jAlert(alertMsg,'CANNOT SELECT DUPLICATE QUESTION');
			
			// deselect this question
			jQuery('[id=' + qIdCheckboxId + ']:checked').attr('checked',false);
			
			// return false
			return false;
		}	
		// else, reset the IDs of the duplicates as follows:
		// if the question was checked then reset all non-checked duplicates by adding a suffix to the IDs
		else {
			addTemporarySuffixesToDuplicateQuestions( qId, duplicatesToReset );
		}
	} 		
	// return true
	return true;
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//Function which determines whether or not this question 
// is associated with a set of duplicate questions
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function hasDuplicateQuestion( qId ) {
	return jQuery('[id^=check_' + qId + ']').length > 0 ;
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Function for temporarily resetting the IDs 
// of a set of duplicate question elements
// by adding a suffix to them
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function addTemporarySuffixesToDuplicateQuestions( qId, duplicates ) {
	duplicates.each(function(ctr){
		jQuery('[id=' + this.id + '][value=' + this.value + ']').parentsUntil('tr').parent().find('*').each(function(){
		     var current_id = this.id;
		     if ( current_id && current_id.indexOf('_'+qId) > -1 ){
		    	 this.id += '_' + ctr;
		     }
	})});
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Function for removing 
// temporarily added suffixes 
// from a set of duplicate questions
// (Meant to be called whenever a duplicate question is deselected)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function removeTemporarySuffixesFromDuplicateQuestions( qId ) {
	var duplicates = jQuery('[id^=check_' + qId + ']');
	if ( duplicates.filter(':checked').length == 0 ) {
		duplicates.parentsUntil('tr').parent().find('*').each(function(){
		     var current_id = this.id;
		     if ( current_id && current_id.indexOf('_'+qId) > -1 ){
		    	 jQuery('[id='+this.id+']').closest('div[id^=right_]').hide(); // ensure that the "Answers" section is hidden, since it is always hidden when its associated question is deselected
		    	 this.id = current_id.replace( /_[0-9]+$/, '' );
		     }
		});
	}
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Functions for showing more/less answers per question
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function handleMoreAndLessAnswerLinks( qId, showOrHideFlag ){
	if ( showOrHideFlag == 'show' ) {		  
		if(jQuery("#more_"+qId).hasClass("wasVisible")){
			showOrHideById("more_"+qId, 1);
		}
		if(jQuery("#less_"+qId).hasClass("wasVisible")){
			showOrHideById("less_"+qId, 1);
		}
		jQuery("#more_"+qId).removeClass("wasVisible");
		jQuery("#less_"+qId).removeClass("wasVisible");

	}
	else { // showOrHideFlag = 'hide'
		jQuery("#more_"+qId).removeClass("wasVisible");
		jQuery("#less_"+qId).removeClass("wasVisible");
		if(jQuery("#more_"+qId).is(":visible")){
			jQuery("#more_"+qId).addClass("wasVisible");
		}
		if(jQuery("#less_"+qId).is(":visible")){
			jQuery("#less_"+qId).addClass("wasVisible");
		}

		//hide more and less answers link
		showOrHideById("more_"+qId, 0);
		showOrHideById("less_"+qId, 0);
	}
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//END Functions for showing more/less answers per question
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				  
function populateAnswersForQuestion(response) {	
	var spinnerId = 'spinner_' + questionId;
	
    if (response.isError()) {
	  jAlert('Error in query: ' + response.getMessage() + ' ' + response.getDetailedMessage());
      hideSpinner( spinnerId );
	  return;
    }

    var data  = response.getDataTable();
    
    displayAnswersForQuestion( questionId, data );
}

function displayAnswersForQuestion( qId, data ) {
    var answerDiv = 'div_' + qId;
    var answerSetDivId = 'answers_'+ qId;
    var currElmId = 'check_' + qId;
    var spinnerId = 'spinner_' + qId;
	var moreId = 'more_' + qId;
	var rightDiv = 'right_'+qId;

	if ( !data )
	{
		showOrHideById(answerSetDivId,1,1400);
	}
	
	else
	{
		var answersArray = new Array();
	    
	    for ( var i = 0 ; i < data.getNumberOfRows(); ++i ) {
	    	var value = data.getValue( i, 3 );
	    	
	    	if ( answersArray.indexOf( value ) == -1 ) {
	    		answersArray.push( value );
	    	}
	    }
	
		//if all answers are displayed, hide more answers link
		if(answersArray.length<globalResultsAtOnce){
			showOrHideById(moreId, 0);
			showMoreIsHidden = true; //no other way to later determine if all answers have already been displayed
		}
		
		if ( jQuery('#'+currElmId).is(':checked')) {//question checkbox is checked
			var questionAnswers = this.answers[questionId];
			if ( /*jQuery('#'+ answerSetDivId).val()===undefined*/questionAnswers == undefined  ) { // means the answers block has not been previously added
				var htmlString = "<div class=\"questionTypeSelect\" id=\"selectdiv_" + questionId + "\"><div class=\"questionTypeSelectChild1\"><span>Variable Type:<br/></span><select id=\"select_" + questionId + "\" name=\"select_" + questionId + "\" onchange=\"updateConfirmationBox('" + questionId+"','" + currElmId +"')\"><option value=\"independent\">Independent</option><option value=\"dependent\">Dependent</option><option value=\"filter\">Filter</option></select></div>";  
				htmlString += "<div class=\"questionTypeSelectChild2\"><span>Data Type:<br/></span><select id=\"seldata_" + questionId + "\" name=\"seldata_" + questionId + "\"  onchange=\"updateDataType('" + questionId+"')\"><option value=\"string\">String</option><option value=\"number\">Numeric</option><option value=\"date\">Date</option></select></div>";
				htmlString += "<fieldset class=\"questionTypeDisplay\"><legend>Join Context</legend>";
				htmlString += "<select id=\"seljoin_" + questionId + "\" name=\"seljoin_" + questionId + "\" onchange=\"updateJoinContext('" + questionId +"')\" ><option value=\"default\">Default</option><option value=\"module\">Modules must match</option><option value=\"form\">Forms must match</option><option value=\"other\">Other</option></select>";
				htmlString += "<div class=\"otherJoinTxt\" id=\"otherJoinTxt_" + questionId + "\" style=\"display:none;\"><label>Other: </label><span id=\"seljoinothertxt_" + questionId + "\" title=\"Click to edit...\" onclick=\"displayJoinContextForm('" + questionId+"');\"></span>";
				htmlString += "<input id=\"seljoinother_" + questionId + "\" name=\"seljoinother_" + questionId + "\" type=\"text\" value=\"\" style=\"display:none;\" onchange=\"refreshJoinContextOtherSection('" + questionId + "')\"/></div>";
				htmlString += "</fieldset>";
				//htmlString += "</div>";
				var rightColumnHtml = '<div id="rightColumnWrap">';
				//rightColumnHtml += '<div id="' + plusMinusDivId + '"class="minusicon" onclick="plusMinusClick(this,\'' + answerSetDivId +'\',\''+questionId+ '\')">Hide</div>';
				rightColumnHtml+='</div>';
				jQuery('#'+answerDiv).append(htmlString);
				
				//---------Add answer-----------
				var el = jQuery(rightColumnHtml);
				questionAnswers = new com.healthcit.hopeanalytics.Answer(el, answersArray, questionId, globalResultsAtOnce);
				questionAnswers.setConfirmationBoxCallback(updateConfirmationBox);
				questionAnswers.setLayoutCallback(updateAnswerSectionLayout);
				answers[questionId] = questionAnswers;
				if(answersArray.length>=globalResultsAtOnce){//if more than specified number of answers, add link to show more
					el.append('<a href="#more" id="'+moreId+'" class="showMore">+ Show More Answers</a>');
				}
				jQuery('#'+rightDiv).append(el);
				
				//------------------------------
				
				//jQuery('#'+rightDiv).append(rightColumnHtml);
			}
			else if (jQuery('#'+ answerSetDivId).is(':hidden')) { // means the answers block was previous added,but it is just hidden
				showOrHideById(answerSetDivId,1,1400);
				
			}
			else{ //if not hidden, must be adding more answers
				questionAnswers.addAnswers(answersArray);
			}
		}
	}
	//hide the spinner
	hideSpinner( spinnerId );
	    
    // update the answers confirmation box    
    var ansCheckId = currElmId;
	updateConfirmationBox(qId,ansCheckId);

	//faux columns	
	updateAnswerSectionLayout(qId);	
}

function updateAnswerSectionLayout(qId){
	if(jQuery(".leftColumn").length==0){
		var totalAnswers = jQuery("#answers_"+ qId + " div").length;
		if(totalAnswers>globalResultsAtOnce){
			for(var i=0;i<totalAnswers;i=i+2){
				jQuery("#answers_"+ qId + " div:eq("+i+")").addClass("leftColumn");
			}
			for(var i=1;i<totalAnswers;i=i+2){
				jQuery("#answers_"+ qId + " div:eq("+i+")").addClass("rightColumn");
			}
		}
	}
	else{
		var totalAnswers = jQuery("#answers_"+ qId + " div").length;
		if(totalAnswers>globalResultsAtOnce){
			var startIndex = jQuery("#answers_"+ qId + " div.leftColumn:last").index()+1;
			for(var i=startIndex;i<totalAnswers;i=i+2){
				jQuery("#answers_"+ qId + " div:eq("+i+")").addClass("leftColumn");
			}
			for(var i=startIndex+1;i<totalAnswers;i=i+2){
				jQuery("#answers_"+ qId + " div:eq("+i+")").addClass("rightColumn");
			}
			jQuery("#answers_"+ questionId + " div").each(function(index){
				if(!jQuery(this).hasClass("rightColumn") && !jQuery(this).hasClass("leftColumn")){
						jQuery(this).addClass("rightColumn");
				}
			});
		} else {
			jQuery(".leftColumn").removeClass("leftColumn");
			jQuery(".rightColumn").removeClass("rightColumn");
		}
	}
}

function setAnswersConfirmationBox(answerIndex,qId){
	var ansCheckId = 'ans_' + answerIndex + '_' + qId;
	updateConfirmationBox(qId,ansCheckId);
}

function showOrHideAnswerCheckboxes(qId){
	var indDepSelectDropdownId = 'select_' + qId;
	var answerSetDivId = 'answers_' + qId;
	var value = jQuery('#'+indDepSelectDropdownId).val();
	if ( value=="independent" || value=="filter" ) {// then hide all answer checkboxes
		jQuery('#'+answerSetDivId+' div input[type=checkbox]').hide();
	}
	else{ //show all answer checkboxes
		jQuery('#'+answerSetDivId+' div input[type=checkbox]').show();
	}
}

function executeQueryForAnswers(skipValue, qId){
	var queryString = baseUrlString + 'caHopeDS?viewName=GetAllQuestionsWithAnswers&group=true&orderedColumnNames=QId,QText,AId,AText';
	queryString += '&startkey=["' + qId + '"]&endkey=["' + qId + ',{}"]';
	queryString += '&limit='+globalResultsAtOnce+'&skip='+skipValue;
	
	var query = new google.visualization.Query(queryString);		
	query.setQuery('select QId, QText, AId, AText');	
	questionId = qId; //set global variable to be used in the callback function
	//globalQueryString = limitedQueryString; //set global variable to be used in the callback function
	query.send(populateAnswersForQuestion);	
}

/*"Show more answers" link event*/
jQuery("a.showMore").live('click', function() {
	var answerId = jQuery(this).attr('id');
	//get number of answers already loaded
	var skipValue = jQuery(this).siblings("fieldset").children("div").length;
	
	questionId = answerId.substring(5);
	
	executeQueryForAnswers(skipValue, questionId);
	
	//add show less link if it hasn't been added
	if(jQuery("#less_"+questionId).length==0 || jQuery("#less_"+questionId+":hidden").length>0){
		jQuery(this).after('<a href="#showLess" class="showLessLink" id="less_'+questionId+'">- Show Less Answers</a>').hide().slideDown();
	}
	
	return false;
});

/*"Show less answers" link event*/
jQuery("a.showLessLink").live('click', function() {
	var answerId = jQuery(this).attr('id');
	
	questionId = answerId.substring(5);
	var ans = answers[questionId];
	var hasMore = ans.removeAnswers();
	showOrHideById("more_"+questionId, 1);
	if(hasMore){	
		jQuery(this).hide();			
	}
	
	return false;
});

// end POPULATE ANSWERS

/***********************************************/
/** Functions setting up JOIN CONTEXTS */
/***********************************************/

// Set up join contexts
function updateJoinContext( qId ){
	var joinContextElmId = 'seljoin_' + qId; // join context element ID	
	var joinContextOtherElmContainerId = 'otherJoinTxt_' + qId; // join context "Other" container ID	
	var joinContext = jQuery('#'+joinContextElmId).val();// selected join context for this question
		
	// if this question is being used as a join context variable, then 
	// the join context must be 'module' or 'form'
	var isJoinVariable;
	jQuery('[id^=seljoinother_]').each(function(){ 
		isJoinVariable = ( this.value == qId );
		return ! isJoinVariable; // if isJoinVariable is true then this will break out of the loop
	});
	
	if ( isJoinVariable && ! arrayContains(['module','form'], joinContext ) ) {
		jAlert('Only join contexts "Module" and "Form" are permitted for this question<br/>(it is being used as a join variable).');
		jQuery('#' + joinContextElmId).val('module'); // set the join context to "Module" by default
	}
	
	// else, if this question is an autogenerated field, then 
	// the join context must be from the predefined set of join contexts for that field
	else if ( isAutogeneratedField( qId ) ){
		var requiredJoinContext = autogeneratedQuestionFieldJoinContexts[ getQuestionShortName(qId) ];
		if ( joinContext != requiredJoinContext ){
			jAlert('Only join context "' + requiredJoinContext + '" is permitted for this question.');
			jQuery('#' + joinContextElmId).val(requiredJoinContext); // reset the join context
		}
	}
	
	// else if join context = "other":
	else if ( joinContext == 'other' ){		
		//display the Join Context "Other" Variable entry form
		displayJoinContextForm(qId);
	}	
	// else:
	else{
		// show the spinner for this question
		showSpinner('spinner_'+qId);
		
		// clear the join context for "Other" for this question
		clearLocalJoinContextForOther( qId );
		
		// if joinContext = module
		if ( joinContext == 'module' ) {
			finalizeJoinContextSelection(qId,'module');		
		}

		// if joinContext = form
		else if ( joinContext == 'form' ) {
			finalizeJoinContextSelection(qId,'form');
		}
		
		// hide the spinner for this question
		hideSpinner('spinner_'+qId);
	}
}

// this clears the join context "Other" variable associated with this question
function clearLocalJoinContextForOther( qId ) {
	simulateBrowserUpdate('seljoinother_'+qId,'');
	
	// if the selected join context is still "other", then reset the join context
	if ( jQuery('#seljoin_' + qId).val() == 'other' ) jQuery('#seljoin_' + qId).val('default');
}

// this refreshes the join context "Other" section as appropriate
// (showing/hiding, displaying the join variable's question short name, etc.)
function refreshJoinContextOtherSection( qId ){
	// set up variables
	var otherJoinSectionElm = jQuery('#otherJoinTxt_' + qId);
	var otherJoinVar = jQuery('#seljoinother_' + qId).val();
	var showOrHide = ! isEmptyString( otherJoinVar );
	
	// refresh the screen appropriately
	otherJoinSectionElm.toggle( showOrHide );
	// update the descriptive text for this join context
	setOtherJoinContextDescriptiveText( qId );
}

function setOtherJoinContextDescriptiveText( qId, joinQId, joinContext ) {
	var otherJoinVarText = '';
	if ( !joinQId ) joinQId = jQuery('#seljoinother_' + qId).val();
	if ( ! isEmptyString( joinQId ) ){
		otherJoinVarText = getQuestionShortName( joinQId ) + ' must match';
		if ( ! joinContext ) joinContext = getQuestionSelectedJoinContext( joinQId );
		if ( !!joinContext ) {
			otherJoinVarText += ' for each ' + joinContext;
		}
	}
	
	// set the descriptive text
	var otherJoinVarTextElm = jQuery('#seljoinothertxt_' + qId);
	otherJoinVarTextElm.html( otherJoinVarText );
}

// this function iterates through all the join context "Other" selections
// to confirm whether or not they are valid
function validateAllJoinContexts(){
	var errorMsgStr = '';
	
	// 1. Validate each join variable selection independently
	getAllJoinContextSelections().each( function(){	
		var qId = this.id.replace('seljoin_','');
		var qShortName = getQuestionShortName( qId );
		var otherJoinQId = jQuery('#seljoinother_'+qId).val();
		var err = validateJoinContext(qId,otherJoinQId);
		if ( ! isEmptyString( err ) ) errorMsgStr += '-<b>' + qShortName + '</b>: ' + err;	
		else {
			if ( ! isEmptyString( otherJoinQId ) && ! arrayContains( otherContextJoinVariables, otherJoinQId )) {
				otherContextJoinVariables.push( otherJoinQId );
			}
		}
	});	
	
	// 2. Validate that there is no more than one join variable
	// (For now only 1 is permitted)
	if ( otherContextJoinVariables.length > 1 ) {
		errorMsgStr += "-No more than 1 join variable is permitted for the \"Other\" join context.<br/>";
	}

	// 3. Validate that the join variable has been included as an independent/filter variable
	if ( otherContextJoinVariables.length > 0 && 
		(!arrayContains( ['independent','filter'],getQuestionSelectedVariableType( otherContextJoinVariables[ 0 ] ) ) || 
		 !isQuestionSelected( otherContextJoinVariables[ 0 ] ))){
		errorMsgStr += "-The join variable <b>" + getQuestionShortName(otherContextJoinVariables[ 0 ]) + "</b> should be included as one of the query variables, or it should no longer be made a join variable.<br/>";
	}
	
	return errorMsgStr;
}

// this function returns a list of the DOM elements representing
// all selected join contexts
function getAllJoinContextSelections(){
	return jQuery('[id^=seljoin_]');
}

//this function checks whether or not this join variable is valid in the current query
function validateJoinContext(qId,otherJoinQId){
	var errorMsgStr = '';
	var joinContext = jQuery('#seljoin_'+qId).val();
	
	if ( isQuestionSelected( qId )) {	
		// 1. Validate that the field selected as the join variable
		// is not the same as the current question
		if ( qId == otherJoinQId ) {
			errorMsgStr += '-A question cannot select itself as the join variable.<br/>';
		}
		
		// 2. Validate that when "Other" has been selected as the join context,
		// the "Other" value field is not blank
		if ( joinContext == 'other' && isEmptyString( otherJoinQId ) ) {
			errorMsgStr += '-When the join context is "Other", a question must be selected as the join variable.<br/>';
		}
		
		// 3. Validate that when "Other" has not been selected as the join context,
		// the "Other" value field is blank
		if ( joinContext != 'other' && ! isEmptyString( otherJoinQId ) ) {
			errorMsgStr += '-A question may only be selected as a join variable when the join context is "Other".<br/>';
		}
		
		// 4. Validate that the selected join variable is not a dependent variable
		if ( getQuestionSelectedVariableType( otherJoinQId ) == 'dependent' ) {
			errorMsgStr += '-Dependent variables may not be selected as join variables.<br/>';
		}
		
		// 5. Validate that the selected join variable is not an autogenerated field
		if ( isAutogeneratedField( otherJoinQId ) ){
			errorMsgStr += '-Autogenerated fields may not be selected as join variables.<br/>';
		}
		
		// 6. Validate that when "Module" has been selected as the join context,
		// the "Module" autogenerated field has been selected
		if ( joinContext == 'module' && !isQuestionSelected( getQuestionIdForShortName('Module'))){
			errorMsgStr += '-The field "Module" should be selected when the join context is "module".<br/>';
		}
		
		// 7. Validate that when "Form" has been selected as the join context,
		// the "Form" autogenerated field has been selected
		if ( joinContext == 'form' && !isQuestionSelected( getQuestionIdForShortName('Form'))){
			errorMsgStr += '-The field "Form" should be selected when the join context is "form".<br/>';
		}
	}
	return errorMsgStr;
}

// this displays a form allowing the user to specify a variable to use
// as the join context for a question
// (currently displayed when the user selects "Other")
function displayJoinContextForm(qId){
	var qShortName = getQuestionShortName(qId); // question short name
	
	// Construct the Join Context Form
	if ( jQuery("#joinContextForm").length == 0 ) {
		var htmlStr = "<form id=\"joinContextForm\" style=\"display:none;\">";
		htmlStr += "<div id=\"join_context_spinner\" class=\"spinner\" style=\"display:none;\">&nbsp;</div>";
		htmlStr += "<div class=\"guidance\">Select a variable to use as the join context for ";
		htmlStr += "<span id=\"textFld1\" class=\"highlighted\">" + qShortName + "</span>.</div>";
		htmlStr += "<span class=\"red-asterisk\">*</span>";
		htmlStr += "<input type=\"text\" name=\"otherJoinContextValueFld\" id=\"otherJoinContextValueFld\" class=\"text ui-widget-content ui-corner-all\" value=\"\" />";
		htmlStr += "<span class=\"dropdownIcon\" onclick=\"joinContextAutoCompleter('search');\">&nbsp;&nbsp;&nbsp;&nbsp;</span>"
		htmlStr += "<input type=\"hidden\" id=\"joinContextCurrentQuestion\" value=\"" + qId + "\"";
		htmlStr += "<div class=\"subsection\" style=\"display:none;\">";
		htmlStr += "<div class=\"guidance2\">Select the join context for ";
		htmlStr += "<span id=\"textFld2\" class=\"highlighted\"></span>.</div>";
		htmlStr += "<input type=\"radio\" name=\"otherJoinContextJoinFld\" value=\"module\" checked/>Module&nbsp;";
		htmlStr += "<input type=\"radio\" name=\"otherJoinContextJoinFld\" value=\"form\"/>Form";
		htmlStr += "</div>"
		htmlStr += "</form>";
		jQuery("#table_container").append(htmlStr);
		joinContextAutoCompleter('setup');
	}
	
	// Update the values in the Join Context form 
	// for the current question
	jQuery("#joinContextCurrentQuestion").val(qId);
	jQuery("#joinContextForm #textFld1").html(qShortName);
	jQuery('#joinContextForm div.subsection').hide();
	jQuery("#joinContextForm #textFld2").html('');
	jQuery('#joinContextForm [name=otherJoinContextJoinFld]').attr('checked',false);
	jQuery('#joinContextForm [name=otherJoinContextJoinFld][value=module]').attr('checked',true);
	
	// Create and display the dialog box within which the Join Context form will be displayed
	jQuery('#joinContextForm').dialog({
		width: 350,title:"Select Join Variable",modal:true,autoOpen:false,buttons:{
		"Update" : function(){
			// show the spinner
			showSpinner('join_context_spinner');
		
			// update the join context's "Other" value to 
     		// the value of the "tmpJoinContextOther" field
			var joinQId = jQuery('#tmpJoinContextOther').val();
			if ( ! joinQId  ) joinQId = '';
			finalizeJoinContextSelectionForOther( qId, joinQId );
			
			// hide the spinner
			hideSpinner('join_context_spinner');
		
			// clear out all form fields and close the dialog box
			jQuery("#otherJoinContextValueFld").val('');
			jQuery('#joinContextForm').dialog('close');
		},
		"Cancel" : function(){			
			// clear out all form fields and close the dialog box
			jQuery("#otherJoinContextValueFld").val('');
			jQuery('#joinContextForm').dialog('close');
			// reset the join context for the question if applicable
			if ( isEmptyString( getQuestionSelectedJoinVariableForOther( qId )) ){
				clearLocalJoinContextForOther(qId);
			}
		}}
	});
	jQuery('#joinContextForm').dialog('open');
}

// Function which handles showing/hiding 
// the section of the Join Context form that displays the join variable's join context
function refreshJoinContextForm(text,showOrHideFlag){
	if ( showOrHideFlag == 'show' ) {
		jQuery('#joinContextForm div.subsection').show();
		jQuery("#joinContextForm #textFld2").html(text);
	}
	else {
		jQuery('#joinContextForm div.subsection').hide();
		jQuery("#joinContextForm #textFld2").html('');
	}
}

//Function which handles autocompletion
function joinContextAutoCompleter(flag){
	var input = jQuery("#otherJoinContextValueFld");
	var currentQId = jQuery('#joinContextCurrentQuestion').val();
	if ( flag == 'search' ) { // activates the dropdown when the user clicks on the dropdown image
		if ( input.autocomplete( 'widget' ).is( ':visible' ) ) {
			input.autocomplete( 'close' );
			return;
		}
		input.autocomplete( 'search' );
		input.focus();
	} 
	else if ( flag == 'setup' ){ // initializes autocomplete
		input.autocomplete( { source: getFullListOfQuestions(), minLength: 0 });
		input.bind('autocompleteselect', function( event, ui ){
			var joinQId = ui.item ? ui.item.questionId : '';	
			var joinQText = ui.item ? ui.item.label : '';

			// validate whether the selected join variable can be used
			var returnVal = updateJoinContextForOther( currentQId, joinQId );
			// refresh the Join Context form as appropriate
			refreshJoinContextForm( joinQText, returnVal ? 'show' : 'hide');
			// return (if the return value is false then any selection will be de-selected)
			return returnVal;
		});
	}
}

function updateJoinContextForOther( qId, joinQId ){
	// if the joinQId is blank then return
	if ( isEmptyString( joinQId ) ) {
		return false;
	}
	
	// else if the join variable is invalid then prompt the user as appropriate
	var errorMsg = validateJoinContext( qId, joinQId );
	if( ! isEmptyString( errorMsg ) ){
		jAlert(errorMsg,"Invalid Variable Selection");
		// clear out the "Other"-related join context field
		jQuery("#otherJoinContextValueFld").val('');
		return false;
	}
	
	// else proceed	
	var existingJoinVars= jQuery('input[id^=seljoinother_][value!=\'\'][value!=\'' + joinQId + '\']');
	
	// Prevent the user from adding more than one join variable to the query		
	if ( existingJoinVars.length > 0 ) {
		var existingJoinVarQId =  existingJoinVars[ 0 ].value;
		var existingJoinVarShortName = getQuestionShortName( existingJoinVarQId );
		var joinVariableShortName = getQuestionShortName( joinQId );
		var msg = "<b>" + existingJoinVarShortName + "</b>";
		msg += " has already been selected as a join variable.";
		msg += "<br/><br/>You may not select more than <b>1</b> question as the join variable."
		msg += "<br/><br/>Do you want to reset the join variable to <b>" +  joinVariableShortName + "</b>?";
		jConfirm(msg,"Invalid Variable Selection",function( r ){
			// If the user clicks "OK", then proceed to update the join context "Other" sections
			if ( r ) prefinalizeJoinContextSelectionForOther(qId,joinQId);
			else {
				// clear out the "Other"-related join context field
				jQuery("#otherJoinContextValueFld").val('');
				return false;
			}
		});
	} else{
		prefinalizeJoinContextSelectionForOther(qId,joinQId);
	}
	
	// return true; this means that the selected variable's value was saved
	// and could be used as the new join variable
	return true;
}

// function which updates the DOM element which stores the current join variable selection
// NOTE: The current join variable selection will NOT be finalized
// until the user clicks "Done" or "Cancel" on the form.
function prefinalizeJoinContextSelectionForOther(qId,joinQId){
	if (jQuery('#tmpJoinContextOther').length==0){
		jQuery("#joinContextForm")
			.append("<input type=\"hidden\" id=\"tmpJoinContextOther\" value=\"\">");
	}
	
	jQuery('#tmpJoinContextOther').val(joinQId);
}

function finalizeJoinContextSelection(qId,joinContext){
	var shortname = ( joinContext == 'module' ? 'Module' : (joinContext == 'form' ? 'Form' : null));
	if ( shortname ) {
		// Add the Module or Form question to the set of variables for this query
		var moduleOrFormQId = getQuestionIdForShortName( shortname );
		if ( !isQuestionSelected(moduleOrFormQId) ){
			// update the question checkbox
			simulateBrowserUpdate('check_'+moduleOrFormQId,true);
			
			//update the question's variable type
			simulateBrowserUpdate('select_'+moduleOrFormQId,'filter');
			
			//update the join context
			simulateBrowserUpdate('seljoin_'+moduleOrFormQId, joinContext, true );			
		}
		// If this is a join variable then make appropriate updates
		// to all the questions that use this join variable
		var otherJoinVariableElms = jQuery('[id^=seljoinother_]');
		otherJoinVariableElms.each(function(){
			if ( this.value == qId ) { // means that qId is an "Other"-related join variable
				if ( !!joinContext ){
					var targetQId = this.id.replace('seljoinother_','');
					setOtherJoinContextDescriptiveText( targetQId, qId, joinContext );
				}
			}
	   });
	}
}

// function which does a global update of all the "Other"-related join contexts
// based on the given parameters
function finalizeJoinContextSelectionForOther(qId,joinQId){
	// Update the "Other" join context field for this question
	simulateBrowserUpdate( 'seljoinother_'+qId, joinQId );
	
	// if joinQId is not blank, then update the remaining "Other" join context fields
	if ( !isEmptyString( joinQId ) ) {
		// if the join variable has not yet been added to the query,
		// then make it a new filter variable
		var joinVariableType = getQuestionSelectedVariableType(joinQId);
		if ( ! joinVariableType || !isQuestionSelected( joinQId )) {
			// update the question checkbox
			simulateBrowserUpdate('check_'+joinQId,true);
			
			//update the question's variable type
			simulateBrowserUpdate('select_'+joinQId,'filter');
		}
		
		//update the join variable's join context
		var joinQContext = jQuery('[name=otherJoinContextJoinFld]:checked').val();
		if ( isEmptyString( joinQContext ) ) joinQContext = 'module';
		simulateBrowserUpdate('seljoin_'+joinQId, joinQContext );	
				
		// update the remaining "Other" join context fields
		jQuery('input[type=text][id^=seljoinother_][id!=seljoinother_' + qId + ']').each( function(){
			if ( jQuery('#'+this.id.replace('other_','_')).val() == 'other'){
				simulateBrowserUpdate( this.id, joinQId );
			}
		});
	}
}

// END setting up JOIN CONTEXTS

/*******************************************************/
/** Functions for processing JOIN CONTEXTS in a query  */
/*******************************************************/

// returns the join key for the given question
function getJoinKeyForQuestion(qId){
	var joinContext = getQuestionSelectedJoinContext(qId); // the question's join context
	var otherJoinContext = getOtherRelatedJoinVariable(); // the current query's "Other"-related join variable, if applicable
	return getJoinKey( joinContext, otherJoinContext );
}
// returns the join key for the given join context variables.
// The structure will look like this: 
//   [
//       Other-related column  (optional - only exists for queries that have an "Other" join context),
//       Owner,
//       ModuleId (optional), 
//       FormId (optional)
//   ]
function getJoinKey( joinContext, otherJoinContext ) {
	var joinKeyArray = new Array(); // the question's join key
	
	// First, add column for the "Other"-related join context, if applicable
	if ( otherJoinContext ){
		var columnName = getJoinColumnName( otherJoinContext );
		joinKeyArray.push( columnName );
	}
	
	// Next, add columns for the non-"Other"-related join context 
	for ( var i = 0; i < joinContextArray.length; ++i ){ 
		var currentJoinContext = joinContextArray[ i ];
		var columnName = getColumnNameForContext( currentJoinContext );
		if ( i == 0 ) {
			joinKeyArray.push( columnName ); // join key will always include "Owner"
		}
		else if ( findMostRestrictiveJoinContext( [ currentJoinContext, joinContext ] ) == joinContext ) {
			joinKeyArray.push( columnName );
		}
	}
	
	// return the join key
	return joinKeyArray;
}

// gets the column name for the given context
function getColumnNameForContext( contextVar ) {
	var columnName;
	var oHsh = { 'default' : 'Owner', 'module' : 'ModuleId', 'form' : 'FormId' }
	
	if ( oHsh[ contextVar ] ) {
		columnName = oHsh[ contextVar ];
	}
	else { // means the join context must be "Other"
		columnName = contextVar + '1';
	}
	
	return columnName;
}

// gets the most restrictive join context for the current query,
// NOTE: this excludes any "Other"-related join context
function getMostRestrictiveJoinContextForCurrentQuery(){
	var currentQueryJoinContexts = 
		getAllSelectedQuestions().map( function(qId) {
			return getQuestionSelectedJoinContext( qId );
		});
	 
	return findMostRestrictiveJoinContext( currentQueryJoinContexts );
}

// gets the most restrictive possible join context
function getMostRestrictiveJoinContext(){
	return joinContextArray[ joinContextArray.length - 1 ];
}

// returns the most restrictive join context in the given array
function findMostRestrictiveJoinContext( arr ) {
	var mostRestrictive;
	if ( arr && arr.length > 0 ){
		mostRestrictive = arr[ 0 ];
		for ( var i = 1; i < arr.length; ++i ) {
			if ( jQuery.inArray( arr[ i ], joinContextArray ) > jQuery.inArray( mostRestrictive, joinContextArray ) ){
				mostRestrictive = arr[ i ];
			}
		}
	}
	return mostRestrictive;
}

// returns the number of columns in the join key for this question
function getNumColumnsForQuestionJoinKey( qId ) {
	var joinKeyArray = getJoinKeyForQuestion(qId);
	return joinKeyArray.length;
}

// returns an array that could be used as the "keys" parameter for Google's visualization join operation
function buildGoogleJoinKey( joinKey ){
	var googleJoinKey = new Array();
	if ( allJoinColumns.length == 0 ) allJoinColumns = getAllJoinColumns();
	for ( var i = 0; i < joinKey.length; ++i ){
		googleJoinKey.push( [i,i] );
	}
	return googleJoinKey;
}

// returns the full set of join columns for the current query
// (will eventually be removed from the dataset in order to render the visualizations correctly)
//The structure will look like this: 
//[
//  Other-related column (optional - only exists for queries that have an "Other" join context),
//  Owner,
//  ModuleId, 
//  FormId
//]
function getAllJoinColumns(){
	var joinContext = getMostRestrictiveJoinContext();
	var otherJoinContextVar = (hasOtherJoinContextSelected() ? 
			               getOtherRelatedJoinVariable() :
			               null);
	
	return getJoinKey( joinContext, otherJoinContextVar );
}

// returns the GROUP BY key to use for grouping the final query results
function getGroupByKey(){
	var joinContext = getMostRestrictiveJoinContextForCurrentQuery();
	var otherJoinVar = (hasOtherJoinContextSelected() ? 
            getOtherRelatedJoinVariable() :
	               null);
	return getJoinKey( joinContext, otherJoinVar );
}

// returns whether or not a join context of "Other" has been selected for the current query
function hasOtherJoinContextSelected(){
	return ( otherContextJoinVariables.length > 0 ) ;
}

// returns the join column name of this question
function getJoinColumnName(qId) {
	if ( qId ) {
		var otherJoinContextShortName = getQuestionShortName( qId );
		var columnName = getColumnNameForContext( otherJoinContextShortName );
		return columnName;
	}
}

// returns the question Id of the "Other"-related join variable for this query
function getOtherRelatedJoinVariable(){
	if ( otherContextJoinVariables.length > 0 ) {
		return otherContextJoinVariables[ 0 ];
	}
}

/*******************************************************/
/** END processing JOIN CONTEXTS in a query            */
/*******************************************************/
// Populate CONFIRMATION BOX
function updateConfirmationBox(qId,ansCheckId){
	var quesCheckId = 'check_' + qId;
	var quesAnchorId = 'anchor_' + qId;
	var answerConfirmationTextId = 'txt_' + ansCheckId;
	var quesIndDepBoxTextClass = 'inddeptxt_' + qId;
	var indDepSelectDropdownId = 'select_' + qId;
	var answerSetDivId = 'answers_' + qId;
	var aggregationBoxId = 'aggregation_' + qId;
	var aggregationBoxClass = 'aggtn_' + qId;
	var isAnswerCheckboxSelected = (ansCheckId.indexOf('ans_') == 0);
	var isQuestionCheckboxSelected = !isAnswerCheckboxSelected;
	// Determine the fieldset to which the selection should be added (Independent box,Dependent box or Filter box)
	var variableType = jQuery('#'+indDepSelectDropdownId).val();
	var indDepBoxId = variableType+'QtnSet';
	var helpContainerContentId = 'help_container_content';
	
	// if this is a saved report, then show the report title
	updateSavedReportTitleSection(helpContainerContentId);
	
	// hide or show all answer checkboxes for this question
	// based on the value of the independent/dependent/filter dropdown
	showOrHideAnswerCheckboxes(qId);
	
	if ( jQuery('#' + ansCheckId).is(':checked') ) { // It means a question/answer checkbox has been selected
		
		// Hide "NONE" in the appropriate Independent/Dependent/Filter box
		jQuery( '#' + indDepBoxId + ' li.none').hide();
		
		// Remove the selection's aggregation box if it exists
		removeAggregationBox( qId );
		
		// Remove the selection's text from the confirmation section if it exists
		jQuery( '.' + quesIndDepBoxTextClass ).remove();
		
		// Add the text to the appropriate Independent/Dependent/Filter box in the confirmation section
		jQuery( '#' + indDepBoxId ).append("<li class=\"" + quesIndDepBoxTextClass + "\"><a href=\"#\" onclick=\"goToQuestionAnchor('" + quesAnchorId + "')\">" + jQuery('#' + quesCheckId).val() + "</a>" + "<ul class=\"answers\"></ul></li>");
		
		// Add a blinking effect to the newly added text
		doBlink('.'+quesIndDepBoxTextClass);
		
		// Add all selected answers (if any) to the appropriate box
		// IF this is a dependent variable
		if ( variableType == 'dependent'){
			jQuery( '#' + answerSetDivId + ' div input[type=checkbox]:checked').each(function(){
				jQuery( '.' + quesIndDepBoxTextClass + ' ul.answers').append("<li>" + jQuery(this).val() + "</li>");
			});
		}
		
		// Add an Aggregation Type section to the appropriate box
		// IF this is a dependent variable
		//TODO: Allow aggregations for independent/filter variables as well
		if ( variableType == 'dependent' ) {
			addAggregationBox( qId );
		}
	}
	else{// It means a question/answer checkbox has been deselected
		if ( isQuestionCheckboxSelected ) {
			// Remove the selection's text from the confirmation section if it exists
			jQuery( '.' + quesIndDepBoxTextClass ).remove();
			// Remove the selection's aggregation box if it exists
			removeAggregationBox( qId );
		}
		else {
			var answerValue = jQuery('#'+ansCheckId).val();
			jQuery("." + quesIndDepBoxTextClass + " li:contains('" + answerValue +"')").remove();
		}
	}
	
	// Show "NONE" in the appropriate Independent/Dependent/Filter box
	// if all the questions/answers were deselected for this box
	if ( jQuery('#independentQtnSet li[class!=none]').length==0 ) 
		jQuery( '#independentQtnSet li.none').show();
	if ( jQuery('#dependentQtnSet li[class!=none]').length==0 ) 
		jQuery( '#dependentQtnSet li.none').show();
	if ( jQuery('#filterQtnSet li[class!=none]').length==0 ) 
		jQuery( '#filterQtnSet li.none').show();
}

// Updates the data type associated with a question
function updateDataType(qId){
	var htmlStr = '';
	
	// Determine whether or not to display a warning
	var selectedDataType = getQuestionSelectedDataType(qId);	
	var total = parseInt(questionDataTypes[ qId + PIPES + 'string' ]);
	var selectedTotal = parseInt(questionDataTypes[ qId + PIPES + selectedDataType ]);
	if ( !isNaN( total ) ) {
		// if none of the data fits the selected data type, 
		// then alert the user and reset the selected data type
		if ( selectedTotal == 0 || isNaN( selectedTotal ) ) {
			htmlStr = "No " + selectedDataType + "s were found for \"" + getQuestionShortName(qId) + "\".";
			jAlert(htmlStr);
			setQuestionSelectedDataType(qId,'string');
		}
		// else, if only some of the data does not fit the selected data type, then 
		// alert the user and reset the selected data type
		else if ( !isNaN( selectedTotal) && selectedTotal < total ) {
			var truncatedPercentage = Math.round(((total-selectedTotal)/total) * 100);
			htmlStr  = "<b>WARNING</b>: By selecting \"" + selectedDataType + "\", "+ truncatedPercentage + "% of the data will not be displayed.";
			jAlert(htmlStr);
			setQuestionSelectedDataType(qId,'string');			
		}
	}
	
	// for dependent variables, reset the aggregation box section
	var isDependentQuestion = jQuery('#select_' + qId).val() == "dependent";
	if ( isDependentQuestion ) {
		removeAggregationBox( qId );	
		addAggregationBox( qId );
	}
	
	// add display options to the question as appropriate
	addQuestionDisplayOptions( qId );
	
}

// adds display options to the question as appropriate
function addQuestionDisplayOptions( qId )
{
	var selectDivElmId = 'selectdiv_' + qId;
	var dateQuestionTypeElmId = 'dateQuestionType_' + qId;
	var dateShowElmId = "dateSelDataShow_" + qId;
	var dateFormatElmId = "dateSelDataFormat_" + qId;	
	var dateFormatSpanElmId = "dateSelDataFormatSpan_" + qId;
	
	var selectedDataType = getQuestionSelectedDataType(qId);
	
	// refresh the question type display options
	jQuery("#" + dateQuestionTypeElmId ).remove();
	
	if ( selectedDataType == 'date' ){ // Date
		var selectDivElm = jQuery( '#' + selectDivElmId );
		var htmlStr = "<fieldset id=\"" + dateQuestionTypeElmId + "\" class=\"questionTypeDisplay\">";
		htmlStr += "<legend>Display Options</legend>&nbsp;Show the&nbsp;&nbsp;<br/><br/>"
		htmlStr += "<select id=\"" + dateShowElmId + "\" class=\"questionDateDisplay\" onchange=\"updateDateFormatOptions('" + qId + "')\">";
		for ( var i = 1; i <= dateDisplayOpts.length; ++i )
		{
			htmlStr += "<option value=" + i + " title=\"" + dateDisplayOptHovers[i-1] +"\">" + dateDisplayOpts[i-1] + "</option>";
		}
		htmlStr += "</select>&nbsp;using&nbsp;<br/><br/><span id =\"" + dateFormatSpanElmId + "\" class=\"questionDateFormatWrapper\">";
		htmlStr += "<select id=\"" + dateFormatElmId + "\" class=\"questionDateFormat\">";
		for ( var i = 1; i <= dateFormatOpts.length; ++i )
		{
			htmlStr += "<option value=" + i + " title=\"" + dateFormatOptHovers[i-1] +"\">" + dateFormatOpts[i-1] + "</option>";
		}
		htmlStr += "</select>&nbsp;format</span>";
		htmlStr += "</fieldset>";
		jQuery( '#' + selectDivElmId ).append(htmlStr);
	}
}

// updates the date format options based on the selected date transformation type
function updateDateFormatOptions(qId) {
	var dateShowElmId = "dateSelDataShow_" + qId;
	var dateFormatElmId = "dateSelDataFormat_" + qId;	
	var dateFormatSpanElmId = "dateSelDataFormatSpan_" + qId;
	var transformationType = jQuery("#"+dateShowElmId).val();
	
	var mappings = { 1: [0,1,2,3,4,5,6], 2 : [2,4] };
	if ( mappings[ transformationType.toString() ]) {
		var opts = mappings[ transformationType.toString() ];
		jQuery("#"+dateFormatSpanElmId).show();
		var optionsHtml = '';
		for ( var i = 0; i < opts.length; ++i )
		{
			var formatIndex = opts[i];
			var val = parseInt(formatIndex)+1;
			optionsHtml += "<option value=" + val + " title=\"" + dateFormatOptHovers[formatIndex] +"\">" + dateFormatOpts[formatIndex] + "</option>";
		}
		jQuery("#"+dateFormatElmId).html(optionsHtml);
	}
	else {
		jQuery("#"+dateFormatSpanElmId).hide();
	}
}

// redirects the user to the question indicated by the provided anchor
function goToQuestionAnchor(anchor){
	var isHomePageLoaded = jQuery('#table_container').is(':visible');
	if ( !isHomePageLoaded ) navigateToCreateReports();	
	window.location.hash = '#' + anchor;
}
// end CONFIRMATION BOX

function loadjscssfile(filename, filetype){
	 if (filetype=="js"){ //if filename is a external JavaScript file
	  var fileref=document.createElement('script')
	  fileref.setAttribute("type","text/javascript")
	  fileref.setAttribute("src", filename)
	 }
	 else if (filetype=="css"){ //if filename is an external CSS file
	  var fileref=document.createElement("link")
	  fileref.setAttribute("rel", "stylesheet")
	  fileref.setAttribute("type", "text/css")
	  fileref.setAttribute("href", filename)
	 }
	 if (typeof fileref!="undefined"){
	  document.getElementsByTagName("head")[0].appendChild(fileref)
	}
}	

function getNumDependentVariableQuestions(){
	return jQuery('#dependentQtnSet li[class^=inddeptxt_]').length;
}

function getNumIndependentVariableQuestions(){
	return jQuery('#independentQtnSet li[class^=inddeptxt_]').length;
}

function getNumFilterVariableQuestions(){
	return jQuery('#filterQtnSet li[class^=inddeptxt_]').length;
}

function getNumColumnsForDependentQuestion( qId ) {
	if ( qId ) {
		// For numeric questions, only 1 column is returned (the aggregation of all numeric answers)
		// For non-numeric questions, 1 column is returned for each possible answer
		if( hasNumericDataType(qId) )
			return 1;
		else{
			if ( allJoinColumns.length == 0 ) allJoinColumns = getAllJoinColumns();
			for ( var i = 0; i < dependentVarArray.length; ++i ) {
				if ( dependentVarArray[i][0] == qId ) {
					var numColumns = dependentVarResultSetArray[i].getNumberOfColumns() - allJoinColumns.length;
					return numColumns;
				}
			}
		}
	}
}

function plusMinusClick(elem, answerSetDivId, qId){
	expandCollapse(elem, answerSetDivId);
	
	if(elem.className=='minusicon'){
		if(jQuery("#more_"+qId).length>0 && jQuery("#more_"+qId).hasClass("wasVisible")){
			showOrHideById("more_"+qId, 1);
		}
		if(jQuery("#less_"+qId).length>0 && jQuery("#less_"+qId).hasClass("wasVisible")){
			showOrHideById("less_"+qId, 1);
		}
	}
	else if(elem.className=='plusicon'){
		jQuery("#more_"+qId).removeClass("wasVisible");
		jQuery("#less_"+qId).removeClass("wasVisible");
		if(jQuery("#more_"+qId).is(":visible")){
			jQuery("#more_"+qId).addClass("wasVisible");
		}
		if(jQuery("#less_"+qId).is(":visible")){
			jQuery("#less_"+qId).addClass("wasVisible");
		}	
		if(jQuery("#more_"+qId).length>0){
			showOrHideById("more_"+qId, 0);
		}
		if(jQuery("#less_"+qId).length>0){
			showOrHideById("less_"+qId, 0);
		}
	}
}
function expandCollapse(srcElement,answerElmId){
	if ( srcElement.className=='minusicon' ) { //do a "collapse"
	    srcElement.className = 'plusicon';
	    srcElement.innerHTML = 'Show answers...';
		jQuery('#'+answerElmId).hide(1400);
	}
	else { // do an "expand"
		srcElement.className = 'minusicon';
	    srcElement.innerHTML = 'Hide';
		jQuery('#'+answerElmId).show(1400);
	}
}

/**
 * Reset global variables
 */
function resetGlobalVariables(){
	baseVarArray = new Array();
	baseVarResultSet = null;
	baseVarResultSetArray = new Array();
	dependentVarResultSetArray = new Array();
	baseVarColumnNames = new Array();
	dependentVarArray = new Array();
	dependentVarResultSet = null;
	joinedResultSet = null;
	groupedResultSet = null;
	destroyObject(filterControl);
	filterControl = null;
	reportVisualizations = null;
	primaryVisualizations = null;
	secondaryVisualizations = null;
	visualizationMismatchErrors = null;
	currentReportType = null;
	dataMismatchReportTypes = new Array();
	otherContextJoinVariables = new Array();
	otherContextJoinVarResultSet = null;
	otherContextJoinVarResultSetArray = new Array();
	allJoinColumns = new Array();
}

/**
 * Validate Query criteria
 */
function validateQueryCriteria() {
	// First reset the global variables
	resetGlobalVariables();
	
	var valid = true;
	
	var errorMessageString = 'The following issues were found:<br/>';
	
	// Next set up the base variable(s) (the associated question Id(s))
	var baseVarJQueryObj = jQuery('#independentQtnSet li[class^=inddeptxt_],#filterQtnSet li[class^=inddeptxt_]');
	baseVarJQueryObj.each(function() {
		var index = this.getAttribute('class').lastIndexOf('_')+1;
		baseVarArray.push(this.getAttribute('class').substring(index));
	});
	
	// Set up the dependent variables
	var elmId = null;
	var dependentVarJQueryObj = jQuery('#dependentQtnSet li[class^=inddeptxt_]');
	var numDependentQuestions = dependentVarJQueryObj.length;
	var dependentQuestionId = null;
	dependentVarJQueryObj.each( function() {
		var elmId = this.getAttribute('class');
		var index = elmId.lastIndexOf('_')+1;
		dependentQuestionId = elmId.substring(index);
		var dependentAnswerId = null;
		var answerObj = this.down('li');
		var ctr = 0;
		var hasAnswers = !!answerObj;
		if ( hasAnswers ){
			while ( answerObj ) {
				dependentAnswerId = answerObj.innerHTML;
				dependentVarArray.push([dependentQuestionId,dependentAnswerId]);
				answerObj = answerObj.next('li');
			}
		}
		else dependentVarArray.push([dependentQuestionId,dependentAnswerId]);
	});
		
	//1. Validate whether an independent variable has been provided
	if ( baseVarJQueryObj.length == 0 ){
		errorMessageString += '-Please select an independent variable.<br/>';
		valid = false;
	}
	
	//2. Validate the join context selections
	var joinContextErrors = validateAllJoinContexts();
	if ( ! isEmptyString( joinContextErrors ) ) {
		errorMessageString += joinContextErrors;
		valid = false;
	}
	
	// 3. Validate that no autogenerated fields were selected as dependent variables
	for ( var i = 0; i < dependentVarArray.length; ++i ){
		if ( isAutogeneratedField( dependentVarArray[i][0] ) ){
			var shortname = getQuestionShortName( dependentVarArray[i][0] );
			var errorStart = "-Autogenerated field <b>" + shortname + "</b>";
			if ( errorMessageString.indexOf(errorStart) == -1 ){
				errorMessageString += errorStart + " may not be selected as a dependent variable.<br/>";
			}
			valid = false;
		}
	}
	
	
	// Display the validation error messages in an alert for the user	
	if ( !valid ) {
		jAlert( errorMessageString );
	}
	
	return valid;
}

/**
 * Clear the Reports section
 */
function clearReportsSection(){
	var tableContainerDivId = 'table_container';
	
	overlayScreen('Clearing selections...');
	simulatedSleep(1000);
	
	if ( !isCreateReportsPage() ) navigateToCreateReports(); 
	
	jQuery('input[id^=check_]:checked').each(function(){
		jQuery(this).attr('checked',false);
		invokeAttachedDOMEvent(jQuery(this),function(){removeOverlayScreen();});
	});
}

/**
 * Generate the Reports section
 */
function generateReportsSection(){
	// validate the query criteria supplied by the user
	var isValid = validateQueryCriteria();
	if ( isValid ) {
		// if the query criteria is valid then show the appropriate section
		navigateToViewReports();
	}
	return isValid;
}

function generateAnalytics(){
	// generate the Query object for the "Other"-related join context variables, if any
	if ( hasOtherJoinContextSelected() ) {
		getReportsForOtherJoinContextVariables();
	}
	// else, generate the Query object for the base variables
	else {
		getReportsForBaseVariables();
	}
}

function getReportsForOtherJoinContextVariables(response){
	if ( response ) { // the response object is the actual response object returned by a Query
		if (response.isError()) {
			jAlert('Error in query: ' + response.getMessage() + ' ' + response.getDetailedMessage());
			return;
	    }
		otherContextJoinVarResultSetArray.push( response.getDataTable() );
	}
	
	if ( otherContextJoinVarResultSetArray.length < 1 ) { // currently does not allow more than 1 "Other"-related join variable
		// process the "Other"-related join variable
		var otherJoinVar = getOtherRelatedJoinVariable();
		var otherJoinVarColumnName = getFormattedColumnName( otherJoinVar );
		var otherJoinVarQueryString = baseUrlString + 'caHopeDS?viewName=GetAllQuestionsWithAllAnswersAndOwners&group=true&orderedColumnNames=QId,' + otherJoinVarColumnName +',Owner,ModuleId,FormId';
		otherJoinVarQueryString += '&startkey=["' + otherJoinVar + '"]&endkey=["' + otherJoinVar + ',{}"]';
		// if the base variable(s) are dates then indicate this in the request parameters
		otherJoinVarQueryString += hasDateDataType(otherJoinVar) ? '&dateDataType='+otherJoinVarColumnName : '';
		var otherJoinVarQuery = new google.visualization.Query(otherJoinVarQueryString);
		otherJoinVarQuery.setQuery('select ' + otherJoinVarColumnName + ',Owner,ModuleId,FormId' );
		otherJoinVarQuery.send(getReportsForOtherJoinContextVariables);	
	}
	
	else {
		otherContextJoinVarResultSet = otherContextJoinVarResultSetArray[ 0 ];
		//The following commented-out code may be useful to view the baseVarResultSet during debugging:
//		var reportTable = new google.visualization.Table($("reports_div_1"));
//		reportTable.draw(otherContextJoinVarResultSet,{showRowNumber:false,cssClassNames:{hoverTableRow:'noBackground',selectedTableRow:'noBackground',headerRow:'reportsTableHeader', headerCell:'reportsTableHeaderCell'}});
//		hideSpinner('reports_container_spinner');
//		$('reports_div_1').show();
		
		// generate the Query object for the base variables
		getReportsForBaseVariables();
	}	
}
			  
function getReportsForBaseVariables(response) {
	if ( response ) { // the response object is the actual response object returned by a Query
	    if (response.isError()) {
		  jAlert('Error in query: ' + response.getMessage() + ' ' + response.getDetailedMessage());
		  return;
	    }	    
	    baseVarResultSetArray.push( response.getDataTable() );
	}
	
	if ( baseVarResultSetArray.length != baseVarArray.length ) {
		// This means that the base variables have not been completely processed,
		// so proceed to process the next batch of base variables
		var currBaseVar = baseVarArray[ baseVarResultSetArray.length ];
		baseVarColumnNames.push( getFormattedColumnName( currBaseVar ) );
		var baseVarColumnName = baseVarColumnNames[ baseVarColumnNames.length - 1 ];
		var otherJoinColumnName = getJoinColumnName( getOtherRelatedJoinVariable() );
		var baseVarQueryString = baseUrlString + 'caHopeDS?viewName=GetAllQuestionsWithAllAnswersAndOwners&group=true&orderedColumnNames=QId,' + baseVarColumnName +',Owner,ModuleId,FormId';
		// if an "Other" join context exists then add the column to the query
		if ( otherJoinColumnName ) baseVarQueryString += ',' + otherJoinColumnName;
		baseVarQueryString += '&startkey=["' + currBaseVar + '"]&endkey=["' + currBaseVar + ',{}"]';
		// if the base variable(s) are dates then indicate this in the request parameters
		baseVarQueryString += hasDateDataType(currBaseVar) ? '&dateDataType='+baseVarColumnName : '';
		var baseVarQuery = new google.visualization.Query(baseVarQueryString);
		var hasOnlyBaseVariables = ( baseVarArray.length > 0 && dependentVarArray.length == 0 );
		baseVarQuery.setQuery('select ' + (otherJoinColumnName ? otherJoinColumnName+',' : '') + 'Owner,ModuleId,FormId,' + baseVarColumnName );
		baseVarQuery.send(getReportsForBaseVariables);	
	}
	
	else {
	    // This means that all the base variables have been processed,
		// so generate the baseVarResultSet entity by
		// performing an outer join of all the base variables
		for ( var index=0; index<baseVarResultSetArray.length; ++index) {
			var oldBaseVarSetIndices = new Array();
			var newBaseVarSetIndices = new Array();
			var joinKey = getJoinKeyForQuestion( baseVarArray[ index ] );
			if ( allJoinColumns.length == 0 ) allJoinColumns = getAllJoinColumns();
			if ( baseVarResultSet ) {
				for ( var i = joinKey.length; i < baseVarResultSet.getNumberOfColumns(); ++i) { // make starting index = joinKey.length to exclude those columns
					oldBaseVarSetIndices.push( i );
				}
				for ( var i = allJoinColumns.length; i < baseVarResultSetArray[ index ].getNumberOfColumns(); ++i) { // make starting index = allJoinColumns.length to exclude the join key columns (OwnerId, ModuleId, FormId, etc.)
					newBaseVarSetIndices.push( i );
				}
			}
			if ( index==0 ) {
				baseVarResultSet = baseVarResultSetArray[ index ];
			}
			else {
			    var qId = baseVarArray[ index ];
				baseVarResultSet  = 
					google.visualization.data.join(
							preprocessDataTable( baseVarResultSet, qId ),
							preprocessDataTable( baseVarResultSetArray[ index ], qId ),
							'left',
							buildGoogleJoinKey( joinKey ),
							oldBaseVarSetIndices,
							newBaseVarSetIndices );
			}
		}
			    
	    // next, proceed to generate the final resultset to be displayed
		
		//The following commented-out code may be useful to view the baseVarResultSet during debugging:
//		var reportTable = new google.visualization.Table($("reports_div_1"));
//		reportTable.draw(baseVarResultSet,{showRowNumber:false,cssClassNames:{hoverTableRow:'noBackground',selectedTableRow:'noBackground',headerRow:'reportsTableHeader', headerCell:'reportsTableHeaderCell'}});
//		hideSpinner('reports_container_spinner');
//		$('reports_div_1').show();
		
	    if ( dependentVarArray.length == 0 ) { // no dependent variables exist        
	        generateCombinedResultSet(1);
	    }
	    else {
	    	// Else, generate the dependent variable resultset
	    	getReportsForDependentVariables();  	
	    }
	}	
}

function getReportsForDependentVariables(response) {
	if ( response ) { // the response object is the actual response object returned by a Query
	    if (response.isError()) {
		  jAlert('Error in query: ' + response.getMessage() + ' ' + response.getDetailedMessage());
		  return;
	    }	    
	    dependentVarResultSetArray.push( response.getDataTable() );
	}
	
	if ( dependentVarResultSetArray.length != getNumDependentVariableQuestions() ) {
		// This means that the dependent variables have not been completely processed,
		// so proceed to process the next batch of dependent variables
		var qId = dependentVarArray[ dependentVarResultSetArray.length ][0];
		var dependentVarColumnName = getFormattedColumnName( qId );
		var otherJoinColumnName = getJoinColumnName( getOtherRelatedJoinVariable() );
		// For now, retrieve the resultset for the complete set of answers for the dependent variable
    	// (irrespective of specified answers)
		var dependentVarQueryString = baseUrlString + 'caHopeDS?viewName=GetAllQuestionsWithAllAnswersAndOwners&group=true&orderedColumnNames=QId,' + dependentVarColumnName +',Owner,ModuleId,FormId';
		// if an "Other" join context exists then add the column to the query
		if ( otherJoinColumnName ) dependentVarQueryString += ',' + otherJoinColumnName;
		// if the dependent variable(s) are numeric then indicate this in the request parameters
		dependentVarQueryString += hasNumericDataType(qId) ? '&numericDataType='+dependentVarColumnName : '';
		// if the dependent variable(s) are dates then indicate this in the request parameters
		dependentVarQueryString += hasDateDataType(qId) ? '&dateDataType='+dependentVarColumnName : '';
		dependentVarQueryString += '&startkey=["' + qId + '"]&endkey=["' + qId + ',{}"]';
		var dependentVarQuery = new google.visualization.Query(dependentVarQueryString);		
		dependentVarQuery.setQuery(hasNumericDataType(qId) ?
				                   'select ' + (otherJoinColumnName ? otherJoinColumnName+',' : '') + 'Owner,ModuleId,FormId,' + getSelectedAggregation(qId) + '(' + dependentVarColumnName + ') group by ' + (otherJoinColumnName ? otherJoinColumnName+',' : '') + 'Owner,ModuleId,FormId' :
				                   'select ' + (otherJoinColumnName ? otherJoinColumnName+',' : '') + 'Owner,ModuleId,FormId,count(QId) group by ' + (otherJoinColumnName ? otherJoinColumnName+',' : '') + 'Owner,ModuleId,FormId pivot '+ dependentVarColumnName);
		dependentVarQuery.send(getReportsForDependentVariables);
	}
	
	else {
	    // This means that all the dependent variables have been processed,
		// so generate the dependentVarResultSet entity by
		// performing an outer join of all the dependent variables
		for ( var index=0; index<dependentVarResultSetArray.length; ++index) {
			var oldDependentVarSetIndices = new Array();
			var newDependentVarSetIndices = new Array();
			var joinKey = getJoinKeyForQuestion( dependentVarArray[ index ] );
			if ( allJoinColumns.length == 0 ) allJoinColumns = getAllJoinColumns();
			if ( dependentVarResultSet ) {
				for ( var i = joinKey.length; i < dependentVarResultSet.getNumberOfColumns(); ++i) { // make starting index = joinKey.length to exclude those columns
					oldDependentVarSetIndices.push( i );
				}
				for ( var i = allJoinColumns.length; i < dependentVarResultSetArray[ index ].getNumberOfColumns(); ++i) { // make starting index = allJoinColumns.length to exclude those columns (OwnerId, ModuleId, FormId, etc.)
					newDependentVarSetIndices.push( i );
				}
			}
			if ( index==0 ) {
				dependentVarResultSet = dependentVarResultSetArray[ index ];
			}
			else {
				dependentVarResultSet  = 
					google.visualization.data.join(
							dependentVarResultSet,
							dependentVarResultSetArray[ index ],
							'full',
							buildGoogleJoinKey( joinKey ),
							oldDependentVarSetIndices,
							newDependentVarSetIndices );				
			}
		}
		generateCombinedResultSet(1);
		
	    //The following commented-out code may be useful to view the dependentVarResultSet during debugging:
//		var reportTable = new google.visualization.Table($("reports_div_1"));
//		reportTable.draw(dependentVarResultSet,{showRowNumber:false,cssClassNames:{hoverTableRow:'noBackground',selectedTableRow:'noBackground',headerRow:'reportsTableHeader', headerCell:'reportsTableHeaderCell'}});
//		hideSpinner('reports_container_spinner');
//		$('reports_div_1').show();
    
	}  
}

// Exports data in downloadable image format
function generateChartAsImage(reportType){
	generateCombinedResultSet( reportType + 5 );
}

// Exports data in Excel format
function generateExcel(){
	var tableElm = jQuery('.google-visualization-table-table')[0];
	if ( tableElm ) {
		var tableText = "<table>" + tableElm.innerHTML + "</table>"; 
		jQuery.download(baseUrlString  + 'ExcelExportServlet',{htmlTable:encodeURIComponent(tableText)});
	}
}

function generateCombinedResultSet(reportType){	 
	// update the value of the current report type
	currentReportType = reportType;
	// update menu tabs as appropriate
	setAsCurrentMenuTab('reportType_' + reportType);	
	var hasDependentVariables = ( dependentVarResultSet != null );
	var hasMultipleBaseVariables = ( baseVarArray.length > 1 );
	// The join key between the base and dependent variable sets should be
	// based on the join context of the first dependent variable
	var joinKey = getJoinKeyForQuestion( dependentVarArray[ 0 ][ 0 ] ); 
	if ( allJoinColumns.length == 0 ) allJoinColumns = getAllJoinColumns();
	
	// initialize the groupedResultSet if it's null
	if ( groupedResultSet == null ){
		if ( hasDependentVariables ) {
			// construct an array containing the column indices from dependentVarSet
			// to include in the resultSet representing the join
			var dependentVarReportColumns = new Array();
			for ( var i = allJoinColumns.length; i < dependentVarResultSet.getNumberOfColumns(); ++i ) { // make starting index = allJoinColumns.length to exclude the join key columns (OwnerId, ModuleId, FormId, etc.)
				for ( var j = 0; j < dependentVarArray.length; ++j ) {
					if ( dependentVarResultSet.getColumnLabel(i).indexOf(dependentVarArray[j][1]) == 0 ||
						 dependentVarArray[j][1] == null ) {
						 if ( dependentVarReportColumns.indexOf(i) == -1 ) dependentVarReportColumns.push( i );
						 break;
					}
				}
			}
			
			// construct an array containing the column indices from baseVarSet
			// to include in the resultSet representing the join
			var baseVarReportColumns = new Array();
			for ( var i = joinKey.length; i < baseVarResultSet.getNumberOfColumns(); ++i ) { // make starting index = joinKey.length to exclude those columns
				baseVarReportColumns.push( i );
			}
			
			// Perform a join between the base variable resultset and
			// the dependent variable result set
			joinedResultSet = google.visualization.data.join(
					preprocessDataTable( baseVarResultSet, dependentVarArray[ 0 ][ 0 ] ),
					preprocessDataTable( dependentVarResultSet, dependentVarArray[ 0 ][ 0 ] ),
					'left',
					buildGoogleJoinKey( joinKey ),
					baseVarReportColumns,dependentVarReportColumns);
			
		}
		else { // no dependent variables exist; so no join needs to be performed
			joinedResultSet = baseVarResultSet;
		}
		
		//The following commented-out code may be useful to view the resultSet during debugging:
//		var reportTable = new google.visualization.Table($("reports_div_1"));
//		reportTable.draw(joinedResultSet,{showRowNumber:false,cssClassNames:{hoverTableRow:'noBackground',selectedTableRow:'noBackground',headerRow:'reportsTableHeader', headerCell:'reportsTableHeaderCell'}});
//		hideSpinner('reports_container_spinner');
//		$('reports_div_1').show();
			
		// Next, perform a GROUP BY on the data
		var aggregationColumns = new Array();
		// if there are no dependent variables, then we add a new column to the dataset that will represent the aggregation column
		var numGroupingColumns = hasDependentVariables ? joinedResultSet.getNumberOfColumns() : joinedResultSet.getNumberOfColumns() + 1;
		var keyColumns = new Array();
		var currDependentQIndex = -1;
		var numColumnsForDependentQId = 0;
		for ( var i = allJoinColumns.length ; i < numGroupingColumns; ++ i ) { // make starting index = allJoinColumns.length to exclude the join key columns (OwnerId, ModuleId, FormId, etc.)
			if ( i < baseVarArray.length + allJoinColumns.length ){
					keyColumns.push( {column: i, modifier: getEmptyCellValue, type: joinedResultSet.getColumnType(i), label: joinedResultSet.getColumnLabel( i )} );
			}
			else
			{
				// EXPLANATION of nextDependentQuestionIndex:
				// i corresponds to
				// the number of base variables, 
				// + the loop's current index in the list of dependent variables.
				// The current index of dependent variables, in turn, 
				// corresponds to the number of columns for each dependent question Id
				// (since each dependent question can have multiple columns represented - 
				// every possible answer has its own column for non-numeric questions.)
				// Hence, if we have not yet finished iterating through
				// all the columns for a dependent question, there is no need to move on to the next
				// dependent question.
				// Else, we increment currDependentQIndex because we are now ready to 
				// start processing columns for the next dependent question.
				// (NOTE: Here we add allJoinColumns.length to nextDependentQuestionIndex because additional columns - Owner,ModuleId,FormId... - exist in the dataset.)
				if ( hasDependentVariables ) {
					var nextDependentQuestionIndex = baseVarArray.length + numColumnsForDependentQId + allJoinColumns.length;
					if ( i >= nextDependentQuestionIndex ) {
						++currDependentQIndex;
						numColumnsForDependentQId += getNumColumnsForDependentQuestion(dependentVarArray[currDependentQIndex][0]);
					}
					aggregationColumns.push({'column': i, 'aggregation': getAggregationMethodObject( dependentVarArray[ currDependentQIndex ][0] ), 'type': 'number', label: joinedResultSet.getColumnLabel( i )});
				}
				
				else {			
					aggregationColumns.push({'column': 0, 'aggregation': cacure.countNonNull, 'type': 'number', label: 'Count'});
				}
			}
		}
		
		groupedResultSet = google.visualization.data.group(
			joinedResultSet,
			keyColumns,
			aggregationColumns
		);
		
		//The following commented-out code may be useful to view the baseVarResultSet during debugging:
//		var reportTable = new google.visualization.Table($("reports_div_1"));
//		reportTable.draw(groupedResultSet,{showRowNumber:false,cssClassNames:{hoverTableRow:'noBackground',selectedTableRow:'noBackground',headerRow:'reportsTableHeader', headerCell:'reportsTableHeaderCell'}});
//		hideSpinner('reports_container_spinner');
//		$('reports_div_1').show();
	}
			
	// Next, set up the visualizations which will display the results of the GROUP BY operation
	if ( !reportVisualizations )
	{
		reportVisualizations = getVisualizationHash();
				
		// The charts should use a derived DataView of groupedResultSet, when appropriate.
		// Override the "draw" method of the chart visualizations 
		// so that they always use the derived DataView as the dataset when appropriate;
		// also, they should alert the user if the dataset does not fit the visualization.
		overrideDrawMethod();
	}
	
	// set up the current visualization's configuration options
	setUpReportOptions(null,reportType);
	
	// hide the spinner
	hideSpinner('reports_container_spinner');
	
	// Next, determine whether or not the query returned any results, as
	// an empty resultset will cause the filter control to break:
	
	
	// If there are no rows in groupedResultSet, then 
	// indicate that there is no data in the resultset
	var noDataFound = ( groupedResultSet.getNumberOfRows() == 0 );
	if ( noDataFound ) 
	{
		jAlert("<font color=\"red\">No data was found.</font>","NO DATA");
		return;
	}
	else
	{
		// set up controls to display in addition to the report/chart
		setUpControls( reportType, groupedResultSet, reportConfigOptions );
	
		// open up a dialog box for ImageCharts
		if ( isImageChartType( reportType ) ) {	
			showDialogBox( 'reportimages_div_' + reportType );
		}
	}
}

// Returns a hash of visualization types
function getVisualizationHash(){
	var oHash = new Object();
	if ( ! primaryVisualizations ) primaryVisualizations = setUpPrimaryVisualizations();
	if ( ! secondaryVisualizations ) secondaryVisualizations = setUpSecondaryVisualizations();
	// add primary visualizations to the hash
	for ( var i in primaryVisualizations ) { oHash[i] = primaryVisualizations[i]; }
	// add secondary visualizations to the hash
	for ( var i in secondaryVisualizations ) { oHash[i] = secondaryVisualizations[i]; }
	// set up error messages associated with each visualization
	if ( !visualizationMismatchErrors ) visualizationMismatchErrors = setUpVisualizationMismatchErrors();
	return oHash;
}

// returns a hash of PRIMARY visualizations
function setUpPrimaryVisualizations(){
	var hsh = {
	 1: new google.visualization.BarChart($("reports_div_1")),//bar chart
	 2: new google.visualization.AreaChart($("reports_div_2")), //area chart
	 3: new google.visualization.PieChart($("reports_div_3")),//pie chart
	 4: new google.visualization.LineChart($("reports_div_4")),//line chart
	 5: new google.visualization.Table($("reports_div_5")),//table
	 6: new google.visualization.ImageBarChart($("reportimages_div_6")),//image bar chart
	 7: new google.visualization.ImageAreaChart($("reportimages_div_7")), //image area chart
	 8: new google.visualization.ImagePieChart($("reportimages_div_8")),//image pie chart
	 9: new google.visualization.ImageLineChart($("reportimages_div_9"))//image line chart
	};
	return hsh;
}

//returns a hash of SECONDARY visualizations
// NOTE: Overridden in proprietary code.
function setUpSecondaryVisualizations(){	
	return {};
}

// returns a hash of mismatch errors associated with the visualizations
// NOTE: Overridden in proprietary code.
function setUpVisualizationMismatchErrors(){
	return {};
}


//returns an array of potential mismatch errors associated
//with the visualization that is associated with this report type
function getVisualizationMismatchErrorForReportType(reportType){
	if ( !visualizationMismatchErrors ) visualizationMismatchErrors = setUpVisualizationMismatchErrors();
	return visualizationMismatchErrors[reportType.toString()];
}

//Utility method for re-drawing visualizations.
//Currently invoked when one of the report option controls are selected.
function redraw( reportType, opts ) {
	setUpReportOptions( opts, reportType );
	filterControl.applyFilter();
}

// Utility method for generating report options
function setUpReportOptions( opts, reportType ){
	reportConfigOptions = {
		    title: getDependentVarAxisTitle().toUpperCase()+' based on '+getIndependentVarAxisTitle().toUpperCase(),
			showRowNumber: false,
			titleY: ( reportType && reportType.toString() == '1' ? getIndependentVarAxisTitle() : getDependentVarAxisTitle()),
			titleX: ( reportType && reportType.toString() == '1' ? getDependentVarAxisTitle() : getIndependentVarAxisTitle()),
			legendTextColor: '#665257',
			isStacked: ( opts && opts['isStacked'] ) ? opts['isStacked']=='stacked' : true,
			legendFontSize: 11,
			axisFontSize: 11,
			titleFontSize: 11,
			cssClassNames: {hoverTableRow:'noBackground',selectedTableRow:'noBackground',headerRow:'reportsTableHeader2', headerCell:'reportsTableHeaderCell2'},
			width: 780,
			height: (reportType ? getCurrentChartHeight(reportType) : 440)
	};	
}

// Utililty Methods for setting up report controls
function setUpControls( reportType, resultSet, opts ) {
	// Set up filter control
	setUpFilterControl( reportType, resultSet, opts );
			
	// Set up report controls, as applicable
	setUpReportControls( reportType );	
}

function setUpFilterControl( reportType, resultSet, opts ) {
	// un-hide the targeted visualization as appropriate
	if ( ! isImageChartType( reportType ) ) {
		jQuery("div[id^=reports_div_]").hide();
		jQuery("#reports_div_"+reportType).show();
	}
	
	// handle the filtering
	if ( ! filterControl ) {
		$("filter_container").empty();
		filterControl = new org.systemsbiology.visualization.FilterDataTableControl($("filter_container"));
		
		//set up the visualizations array parameter
		var arr = new Array();
		for ( var prop in reportVisualizations )
		{
			var currOpts = {};
			for ( key in opts )
			{
				currOpts[ key ] = opts[ key ];
			}
			arr.push( { visualization: reportVisualizations[prop], options: currOpts } );			
		}	
		filterControl.controlled = new Array();
		
		// draw the filter control and its associated visualizations
		filterControl.draw( resultSet, 
			           { controlledVisualizations: arr,
		              // hideFilterContainerOnOpen : true,
			  columnIndexesToFilter : getFilterableColumns(resultSet),
		              labelForTitle : 'Filter Results...'});
	}else {
		filterControl.applyFilter();
	}
}

// Returns an array of columns that can be included in the filter control:
// 1. Currently, columns that do not have more than 1 unique value will cause the 
// filter control to break, so those columns must be removed from the set
// of filterable columns.
function getFilterableColumns( data ) {
	var cols = new Array();
	for ( var i = 0; i < data.getNumberOfColumns(); ++i ) {
		var columnRange = data.getColumnRange(i);
		if ( columnRange && columnRange['min'] != columnRange['max'] ) {
			cols.push( i );
		}
	}
	return cols;
}

function setUpReportControls( reportType ){
	if ( ! isImageChartType( reportType ) ) {
		jQuery("#report_controls").empty();
		
	    jQuery("#report_controls").addClass('report_controls');
	    
	    // Add the "Save Query" link which will be used to save search queries as templates
		jQuery('#report_controls').prepend("<span><a href=\"#reportresults\" class=\"saveQueryLink\" onclick=\"saveReportQuery()\">Save Query...</a></span>");
	    
		// Add the "Filter" link which will be used to filter reports
		jQuery('#report_controls').prepend("<span><a href=\"#reportresults\" class=\"showFilterLink\" onclick=\"showFilterControlDialog()\">Filter...</a></span>");
		  
		// Set up Report option controls:
		// Add a "Chart Type" dropdown for Bar charts
		if ( reportType == 1 ) {
			jQuery('#report_controls').prepend("<span id=\"reportOptionalControls\">Bar Display: <select onchange=\"redraw(" + reportType + ",{isStacked:this.value})\"><option value=\"stacked\">Stacked</option><option value=\"grouped\">Grouped</option></select></span>");
		}
		
	    // Set up Export Links:
		// Add an "Export As Image" link for non-Tabular charts
		if ( reportType != 5 && reportType != 10 ) {
			jQuery('#report_controls').prepend("<span><a href=\"#reportresults\" onclick=\"generateChartAsImage("+reportType+")\">Export...</a></span>");
		}	
		// Add an "Export as Excel" link for Tabular reports
		if ( reportType == 5 || reportType == 10 ) {
			jQuery('#report_controls').prepend("<span><a href=\"#reportresults\" onclick=\"generateExcel()\">Export...</a></span>");
		}
	}
}

function showDialogBox( divId, dlgBoxTitle ) {
	if ( !dlgBoxTitle ) dlgBoxTitle = 'EXPORT';
	var htmlString = jQuery('#'+divId).html();
	htmlString += "<div><input type=\"button\" class=\"reportImageDlgBtn\" value=\"Close\" onclick=\"Modalbox.hide()\"/></div>";
	Modalbox.show(htmlString,{title: dlgBoxTitle, width: 800, height: 400});
}

function showFilterControlDialog(){
	jQuery('#filter_container_wrapper').fadeIn(500);
	filterControl.toggleContainerOpen();
}


// END utility methods for report controls

/* Utility Methods for updating the resultsets with appropriate information
 *    based on the data type(s)
 */

function hasNumericDataType( qId ) {
	var questionDataType = jQuery('#seldata_'+qId).val();
	return questionDataType == 'number';
}

function hasDateDataType( qId ) {
	var questionDataType = jQuery('#seldata_'+qId).val();
	return questionDataType == 'date';
}
// END utility Methods for updating the resultsets based on datatype(s)

/* Google API Enhancements */

// Overrides the draw method by explicitly binding it to a new DataView
function overrideDrawMethod(){
	for ( var type in reportVisualizations ) {
		var visualization = reportVisualizations[ type ];
		if ( ! visualization['draw_old'] ) {
			visualization['draw_old'] = visualization['draw'];
			visualization['report_type'] = type;
			visualization['draw'] = function(){
				if ( currentReportType == this.report_type ){ // only draw the visualizations if it was selected
					var base_dt = resetColumnsForDisplay(this.report_type,arguments[0]);
					var dt = resetColumnsForVisualization(this.report_type,arguments[0],base_dt);
					if ( dt ) {
						this.draw_old(dt,reportConfigOptions);
					}
					else {
						// we assume that "dt" is null because there was a data type mismatch
						// between the data in the datatable and the requested visualization.
						var alertMsg = "<b><i>Sorry, this visualization cannot be used to view this type of data.</i></b>";
						alertMsg += "<br/>Would you like to try transforming the data?";
						var oVisualization = this;
						var oOptions = reportConfigOptions;
						var oConfirmationFunction = function(confirmed){
							if ( confirmed ) {
								dt = transformDataForVisualization(oVisualization.report_type,base_dt);
								if ( dt ) oVisualization.draw_old(dt,oOptions);
								else {
									var msg = "<b><i>Sorry, could not convert the data.</i></b>";
									var errors = getVisualizationMismatchErrorForReportType(oVisualization.report_type);
									if ( errors ) {
										msg += "<br/><br/> Please check the following in your query:<br/>";
										for ( var i = 0; i < errors.length; ++i ) {
											msg += "<li>" + errors[i] + "</li>";
										}
									}
									jAlert(msg, "Could Not Display");
								}
							}
						};
						var alreadyDidTransformation = arrayContains( dataMismatchReportTypes, oVisualization.report_type.toString() );
						if ( alreadyDidTransformation ) {
							oConfirmationFunction(true);
						}
						else {
							jConfirm(alertMsg, "Data Mismatch", oConfirmationFunction);
							dataMismatchReportTypes.push(oVisualization.report_type.toString());
						}
					}
				}
			}
		}
	}
}

// preprocesses the DataTable returned in the response to a query
function preprocessDataTable( dataTable, qId ) {
	var variableType = getQuestionSelectedVariableType( qId );
	if ( variableType == 'independent' || variableType == 'filter' ){
		// 1. If the join context associated with this question is "Other",
		// then update the "Other"-related join variable column
		// with actual values. Otherwise, reset the column to have the same value
		// in all rows.
		// (EXPLANATION: This was done because the join key for all types of joins
		// always starts with the "Other" column as the first key column.
		// However, the "Other" column is only needed for queries with 
		// "Other" join context.
		// By resetting the first column to the same value for the  
		// the other types of joins (Owner, Module, Form etc),
		// we guarantee that those joins would still work as if the "Other"
		// column had not been included in the join.)
		if ( getQuestionSelectedJoinContext( qId ) == 'other' ) {
			var joinKey = getJoinKeyForQuestion( getOtherRelatedJoinVariable() );
			var dataTableIndexes = fillArrayWithRange( joinKey.length, dataTable.getNumberOfColumns()-1 );
								
			// perform the join
			var dt = google.visualization.data.join(
						otherContextJoinVarResultSet,
						dataTable,
						'inner',
						buildGoogleJoinKey( joinKey ),
						[ 0 ],
						dataTableIndexes );
						
			// Re-order the columns so that the "Other"-related variable column
			// is once again the first column
			var columnIndexes = [ joinKey.length ];
			for ( var i = 0; i < dt.getNumberOfColumns(); ++i ) {
				if ( i != joinKey.length ) columnIndexes.push( i ) ;
			}	
			var view = new google.visualization.DataView( dt );
			view.setColumns( columnIndexes );
			var newDataTable = view.toDataTable();
			return newDataTable;
		}
		else {
			// else, reset the "Other"-related join variable column
			// so that it has the same value - '1' - for each row
			if ( hasOtherJoinContextSelected() ){
				var columnLabel = dataTable.getColumnLabel( 0 );
				var columnId = dataTable.getColumnId( 0 );
				dataTable.removeColumn(0);
				dataTable.insertColumn(0,'string',columnLabel,columnId);
				for ( var i = 0; i < dataTable.getNumberOfRows(); ++i ) {
					dataTable.setCell( i, 0, '1' );
				}
			}
		}
	}
	
	return dataTable;
}

// Sets up the DataView as appropriate in order to display it in a visualization
function resetColumnsForDisplay(reportType,data){
	var arr = new Array();
	var arr2 = new Array();
	var hasDependentVariables = ( dependentVarResultSet != null );	
	var hasFilterVariables = ( getNumFilterVariableQuestions() > 0 );
	var hasDependentOrFilterVariables = ( hasDependentVariables || hasFilterVariables );
	var oReportType = parseInt( reportType );
	var hasAnyDateTransformations = ( hasAnySelectedDataType('date') );
	var hasAnyDataTypeTransformations = hasAnyDateTransformations;
	var hasSecondaryVisualization = isSecondaryVisualization(reportType);
	var view;
	var numColumnsForDependentQId=0;
	var currDependentQIndex = -1;
	
	//1. If there are no data transformations, and 
	// if oReportType = 5 (table)
	// or there are no dependent variables,
	// then the dataset should remain unchanged.
	if ( ! hasAnyDataTypeTransformations && ! hasSecondaryVisualization &&
		( oReportType == 5 || ! hasDependentOrFilterVariables )) {
		return data;
	}
	
	//2. Next, the dataset should be the result of grouping by the independent variable(s) only.
	// Hence, all filter variables should be removed from the dataset
	// EXCEPT if the current visualization is a table.
	arr = getNonGroupingColumnObjects(data,baseVarArray.length);
	var lastGroupingIndex = ( isTableType(oReportType) ? baseVarArray.length-1 : getNumIndependentVariableQuestions()-1 );
	var groupingArr = fillArrayWithRange(0,lastGroupingIndex);
	var newGroupedView = google.visualization.data.group( data, groupingArr, arr	);
	view = newGroupedView;
	
	// 3. Next, transform the data if applicable	
	if ( hasAnyDataTypeTransformations ) {
		var qId=null;
		for ( var i = 0; i < view.getNumberOfColumns(); ++i ){ 
			if ( i <= lastGroupingIndex ){
				qId = baseVarArray[ i ];
			}
			else{
				var nextDependentQuestionIndex = ( lastGroupingIndex + 1 ) + numColumnsForDependentQId;
				if ( i >= nextDependentQuestionIndex ) {
					++currDependentQIndex;
					numColumnsForDependentQId += getNumColumnsForDependentQuestion(dependentVarArray[currDependentQIndex][0]);
				}
				qId = dependentVarArray[currDependentQIndex][0];
			}
			
			// get the transformed column object that should be associated with this question
			arr2.push(getTransformedColumnObject(qId,view,i));
		}
		// generate a new view with the newly transformed data		
		var newDateView = new google.visualization.DataView(view);
		newDateView.setColumns(arr2);
		var lastGroupingIndex = ( isTableType(oReportType) ? baseVarArray.length-1 : getNumIndependentVariableQuestions()-1 );
		var groupArr = fillArrayWithRange(0,lastGroupingIndex);
		var newGroupedView = google.visualization.data.group( newDateView, groupArr, getNonGroupingColumnObjects(newDateView,lastGroupingIndex+1) );
		//The following commented-out code may be useful to view the view during debugging:
		/*var reportTable = new google.visualization.Table($("reports_div_1"));
		reportTable.draw(view,{showRowNumber:false,cssClassNames:{hoverTableRow:'noBackground',selectedTableRow:'noBackground',headerRow:'reportsTableHeader', headerCell:'reportsTableHeaderCell'}});
		hideSpinner('reports_container_spinner');
	    $('reports_div_1').show();*/
		
		// reformat the data appropriately
		view = reformatDataView(newGroupedView,arr2);
	}
	return view;
}

// Formats the provided dataset
function reformatDataView(dataView,reformatColumns){
	var dataTable = isFunctionInObject(dataView,'toDataTable') ? dataView.toDataTable() : dataView;
	
	for ( var i=0; i < reformatColumns.length; ++i ){
		var formatToUse = reformatColumns[i]['format'];
		if ( formatToUse ){			
			var visualizationFormatter;
			if ( reformatColumns[i]['type'] == 'date' ){
				visualizationFormatter = new google.visualization.DateFormat({pattern:formatToUse});
				visualizationFormatter.format(dataTable,i);
			}					
		}
	}
	
	return new google.visualization.DataView(dataTable); 
}

// Returns an array of Google Visualization column object for the non-grouping variables 
// (i.e. variables that are NOT independent variables)
function getNonGroupingColumnObjects(data,firstIndex){
	var numColumnsForDependentQId=0;
	var currDependentQIndex = -1;
	var hasDependentVariables = ( dependentVarResultSet != null );
	var arr = new Array();
	
	for ( var i = firstIndex; i < data.getNumberOfColumns(); ++i ) {
		if ( hasDependentVariables ) {
			var nextDependentQuestionIndex = firstIndex + numColumnsForDependentQId;
			if ( i >= nextDependentQuestionIndex ) {	
				++currDependentQIndex;
				numColumnsForDependentQId += getNumColumnsForDependentQuestion(dependentVarArray[currDependentQIndex][0]);
			}
			arr.push( { column: i, aggregation: getAggregationMethodObject( dependentVarArray[ currDependentQIndex ][0] ), type: 'number'} );
		}
		
		else {
			// TODO: Here we assume that the only possible aggregation
			// for reports that do not have dependent variables
			// is the "count" aggregation
			// In the future add other aggregation types as well
			// (for example, "max" aggregation for Dates)
			arr.push( { column: i, aggregation: cacure.countNonNull, type: 'number'} );
		}
	}
	
	return arr;
}

// Returns the Google Visualization column object that should be used for this question
function getTransformedColumnObject(qId,dataTableOrView,qColumnIndex){
	var transformedObject = new Object();
	
	var dateShowElmId = "dateSelDataShow_" + qId; // Date Transformation (month and year only, year only, month only, etc)
	var dateFormatElmId = "dateSelDataFormat_" + qId; // Date Formatting (MM/dd/yyyy, MM/YY, etc)
	var questionHasDateTransformations = (getQuestionSelectedDataType(qId) == 'date');
	
	// a. DATE TRANSFORMATION
	if ( questionHasDateTransformations ){
		// transform the dates according to the submitted criteria	
		var transformation = jQuery("#"+dateShowElmId).val();
		var format = jQuery("#"+dateFormatElmId).val();	
		var transformer = new com.healthcit.DateTableColumnTransformations(qColumnIndex,transformation,format);

		// reformat the DataTable
		var viewFormat = transformer.format(dataTableOrView);		
		
		// generate a new DataView with new date values,
		// depending on what was selected for the date transformations
		function oFunc(dataTable,rownum){return transformer.transform(dataTable,rownum);}
		transformedObject = { calc:oFunc, type:'date', label:dataTableOrView.getColumnLabel(qColumnIndex), format: viewFormat } ;
	}
	// END DATE TRANSFORMATION
	
	// TODO: NUMERIC TRANSFORMATION, STRING TRANSFORMATION, OTHER
	
	// else add the column as is
	else {
		transformedObject = qColumnIndex ;
	}
	
	return transformedObject;
}

//END Google API Enhancements

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Proprietary code functions (these functions are only implemented
// in the proprietary code
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//Sets up the columns that will be appropriate for this report type.
//NOTE: This function is overriden in the proprietary code.
function resetColumnsForVisualization(reportType,data,view){	
	return new google.visualization.DataView(view);
}

//Transforms the data as appropriate for this report type.
//NOTE: This function is overriden in the proprietary code.
function transformDataForVisualization(reportType,dataTable){	
	return new google.visualization.DataView(dataTable);
}

//Returns whether or not this report type is associated with one of the secondary visualizations
function isSecondaryVisualization(reportType){
	if ( !secondaryVisualizations ) secondaryVisualizations = setUpSecondaryVisualizations();
	return secondaryVisualizations[reportType.toString()];
}

//NOTE: This function is overriden in the proprietary code.
function updateSavedReportTitleSection(elmId){
}

//NOTE: This function is overriden in the proprietary code.
function generateSelectedSavedReport(){
}

//Populates the full list of saved report queries on the Welcome Screen
//NOTE: This function is overriden in the proprietary code.
function populateSavedQueryListSection(){
}
// END Proprietary Code functions

/* Methods used to derive titles for the dependent and independent axes*/

// get axis title for the independent variable
function getIndependentVarAxisTitle(){
	return getQuestionShortName( baseVarArray[ 0 ] );
}

// get the axis title for the dependent variable(s)
function getDependentVarAxisTitle() {
	var titleHash = new Object();
	
	var aggregationTitles = {'sum':'Total','count':'Count','countNonNull':'Count','countNonZeroNonNull':'Count','avg':'Average','max':'Max','min':'Min'};
	
	for ( var i=0; i<dependentVarArray.length; ++i ) {
		titleHash[ dependentVarArray[i][0] ]= getQuestionShortName(dependentVarArray[i][0]);
		var selectedAggregation = getSelectedAggregation( dependentVarArray[i][0] );
		titleHash[ dependentVarArray[i][0] ]+=
			' ' + 
			( aggregationTitles[ selectedAggregation ] ? 
			  aggregationTitles[ selectedAggregation ] : 
			  selectedAggregation.capitalizeIt() );
	}
	
	var title = new Array;
	for ( var key in titleHash ) {
		title.push( titleHash[ key ] );
	}
	return title.join(' & ');
}

// get the column name for the question
function getFormattedColumnName( qId ) {
	var shortName = jQuery("#check_" + qId).first().val();
	// Replace any Google Query API reserved characters with an underscore (_)
	shortName = shortName.replace(/[+-\/,*]/,'_');
	var arr = shortName.split(" ");
	var newShortName = '';
	for ( var i = 0; i < arr.length; ++i ) {
		arr[ i ] = arr[ i ].capitalizeIt();
	}
	return arr.join('');
}

// get the chart height that should be used for this query
function getCurrentChartHeight(reportType){
	var baseHeight = 200;
	var numBaseVariables = baseVarArray.length;
	var numRows = groupedResultSet.getNumberOfRows();
	
	if ( parseInt(reportType) >= 6 && parseInt(reportType) <= 9 ) { //Image Line, Area, Bar, Pie Charts
		return baseHeight + ( 230 * numBaseVariables );
	}
	
	else if ( parseInt(reportType) == 5 ) { // Table
		return numRows * 30;
	}
		
	else return baseHeight + 200; //default height is 400
}

// get the question's short name
function getQuestionShortName( qId ) {
	if ( qId ) return jQuery('#check_' + qId).val();
}

// get the full list of questions
function getFullListOfQuestions() {
	var list = 
		jQuery.map(
			jQuery('input[type=checkbox][id^=check_]'),
			function( elm ){
				return { label: elm.value, 
						 questionId: elm.id.replace('check_','')}}
			);
	return list;
}

// get the question's selected data type
function getQuestionSelectedDataType( qId ) {
	if ( qId ) return jQuery('#seldata_' + qId).val();
}

// get the question's selected variable type
function getQuestionSelectedVariableType( qId ) {
	if ( qId ) return jQuery('#select_'+qId).val();
}

// return whether or not this question has been selected
function isQuestionSelected( qId ) {
	if ( qId ) return jQuery('#check_'+qId).is(':checked');
}

//get the question's selected join context
function getQuestionSelectedJoinContext( qId ) {
	if ( qId ) return jQuery('#seljoin_'+qId).val();
}

//get the question's selected join variable when the join context is "Other"
function getQuestionSelectedJoinVariableForOther( qId ) {
	if ( qId ) return jQuery('#seljoinother_'+qId).val();
}

// determine if there are any selected questions with the specified data type
function hasAnySelectedDataType( dataType ) {
	if ( dataType ) return jQuery('[id^=seldata_] option:selected[value='+dataType+']').length > 0;
}

// determine whether this question is an autogenerated field
function isAutogeneratedField( qId ) {
	return arrayContains( autogeneratedQuestionFields, getQuestionShortName(qId) );
}

// function which returns all the selected questions
function getAllSelectedQuestions(){
	var selectedQuestions =
	jQuery.map(
			jQuery('input[type=checkbox][id^=check_]:checked'),
			function( elm ){
				return elm.id.replace('check_','')
			});
	return selectedQuestions;
}

// get the question Id associated with this field's shortname
// NOTE: if the shortname is not unique, this will return the first match
function getQuestionIdForShortName( shortName ){
	return jQuery('[id^=check_][value='+shortName+']:first').attr('id').split('_')[1];
}

function setQuestionSelectedDataType( qId, value ) {
	if ( qId ) return jQuery('#seldata_' + qId).val(value);
}

function showSpinner( spinnerId ) {
	showOrHideById( spinnerId, 1 );
}

function hideSpinner( spinnerId ) {
	showOrHideById( spinnerId, 2 );
}

// Methods used to provide aggregations
function addAggregationBox( qId ) {
	// Update the confirmation box
	var quesIndDepBoxTextClass = 'inddeptxt_' + qId;
	var aggregationBoxId = 'aggregation_' + qId;
	var aggregationBoxClass = 'aggtn_' + qId;	
	jQuery( '.' + quesIndDepBoxTextClass).after("<li class=\"aggregation " + aggregationBoxClass + "\"><span>Aggregation:<span id=\""+aggregationBoxId+"\"/></span></li>");

	// Derive the list of aggregation types
	var list = getListOfAggregations( qId );
	
	// Update the hash of aggregations
	aggregationSet[ qId ] = new UpAndDownSelectBox( aggregationBoxId, list );
	
}

function removeAggregationBox( qId ) {
	// Update the confirmation box
	var aggregationBoxClass = 'aggtn_' + qId;
	var aggregationBoxId = 'aggregation_' + qId;
	jQuery( '.' + aggregationBoxClass).remove();
		
	// Update the hash of aggregations
	aggregationSet[ qId ] = null;
}

function getListOfAggregations(qId){
	return hasNumericDataType( qId ) ? numericAggregationTypes : nonNumericAggregationTypes;
}

function getSelectedAggregation(qId){
	if ( aggregationSet[qId] ) {
		var value = aggregationSet[ qId ].getValue();
		return value;
	}
}

function getAggregationMethodObject(qId){
	var str = getSelectedAggregation(qId);
	if ( str ){
		// Return the appropriate aggregation method for this question.

		// for the "count" aggregation,
		// use cacure.countNonNull for numeric questions
		// and sum for non-numeric questions.
		// ( EXPLANATION: Currently the only aggregation for non-numeric questions is "count".
		//   This is handled by adding a column which represents the number of CouchDB documents for each dependent variable's row.
		//   Hence, the total count is the sum of CouchDB documents in this column.)
		if ( str == 'count') {
			str = hasNumericDataType( qId ) ? 'countNonNull' : 'sum'; 
		}		

		// If a custom aggregator exists, then use it; otherwise
		// use Google's aggregator.
		var method = window['cacure'][str];
		if ( ! method ) method = window['google']['visualization']['data'][str];
		return method;
	}
}

// END Methods used to provide aggregations

//Returns whether or not the current page is the "Create Reports" screen
function isCreateReportsPage(){
	return jQuery('#table_container').is(':visible');
}

/* END Utility Methods to determine the current screen */

/* Other Utility Methods */
function showOrHideById( elmId, showOrHide, duration ) {
	var elm = jQuery('#' + elmId);
	if ( elm ) {
		if ( showOrHide == 1 ) { // show element
			duration ? elm.show(duration) : elm.show();
		}
		else { // hide element
			duration ? elm.hide(duration) : elm.hide();
		}
	}
}

// Modifier used to replace empty table cells with default content
// during the GROUP BY operation
function getEmptyCellValue( cellContent ) {
	if ( cellContent ) return cellContent;
	else return 'No answer';
}

function isImageChartType( reportType ) {
	return reportType > 5 && reportType < 10;
}

function isTableType( reportType ) {
	return parseInt(reportType) == 5;
}

// Custom aggregators 
var cacure = {
		// returns the count of a given set of elements
		// exclusive of null values
		countNonNull: function( values ){
			return values.filter( function(val){ return ( val != null ); }).length;
		},
		// returns the count of a given set of elements
		// exclusive of null values and zero values
		countNonZeroNonNull: function( values ) {
			return values.filter( function(val){ return ( val != null && val != 0 ); }).length;
		}
}

//Submit entities for dataExport
function exportData()
{
	if( joinedResultSet != null )
	{
		ownerIds = joinedResultSet.getDistinctValues(0).join(",");		
		jQuery.download(baseUrlString  + 'DataExportServlet',{'ownerIds':encodeURIComponent(ownerIds)});
	}
}