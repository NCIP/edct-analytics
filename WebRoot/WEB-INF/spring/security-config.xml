<!--L
  Copyright HealthCare IT, Inc.

  Distributed under the OSI-approved BSD 3-Clause License.
  See http://ncip.github.com/edct-analytics/LICENSE.txt for details.
L-->


<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd">

	 <!-- Context Integration Filter -->
    <bean id="httpSessionIntegrationFilter"
			class="org.springframework.security.web.context.SecurityContextPersistenceFilter"/>

	<bean id="passwordEncoder"
		class="org.springframework.security.authentication.encoding.ShaPasswordEncoder"/>
   
    <bean id="userMgr" class="com.healthcit.analytics.service.UserManager" />
		
	<bean id="daoAuthenticationProvider"
			class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="userMgr"/>
		<property name="passwordEncoder" ref="passwordEncoder"/>
	</bean>

   	<bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager">
		<property name="providers">
			<list>
				<!-- <ref bean="inMemoryProvider"/>  for testing purposes only -->
				<!--  ref bean="ldapAuthenticationProvider"/ -->
				<ref bean="daoAuthenticationProvider"/>
			</list>
		</property>
	</bean>

	<bean id="authenticationEntryPoint"
			class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<property name="loginFormUrl" value="/login.jsp" />
		<property name="forceHttps" value="false" />
		<!-- <property name="serverSideRedirect" value="false"/> -->
	</bean>

    <bean id="simpleSuccessHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler">
       <property name="defaultTargetUrl" value="/"/>
    </bean>
    <bean id="simpleFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
       <property name="defaultFailureUrl" value="/login?err=1"/>
    </bean>
	<bean id="authenticationProcessingFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<property name="usernameParameter" value="userName" />
		<property name="passwordParameter" value="password" />
		<property name="authenticationManager" ref="authenticationManager"/>
		<property name="authenticationSuccessHandler" ref="simpleSuccessHandler"/>
		<property name="authenticationFailureHandler" ref="simpleFailureHandler" />
	</bean>

	<!-- Anonymous Processing -->
	<bean id="anonymousProcessingFilter"
			class="org.springframework.security.web.authentication.AnonymousAuthenticationFilter">
		<property name="key" value="foobar"/>
		<property name="userAttribute" value="anonymousUser,ROLE_ANONYMOUS"/>
	</bean>

	<!-- Handling authentication errors -->
	<bean id="accessDeniedHandler"
			class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
		<property name="errorPage" value="/login?err=2" />
	</bean>

	<!-- Security Context Holder Aware Filter - enables request.getUserPrincipal/isUserInRole -->
	<bean id="securityContextHolderAwareRequestFilter"
    	class="org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter" />
 	
	<bean id="exceptionTranslationFilter"
			class="org.springframework.security.web.access.ExceptionTranslationFilter">
		<property name="authenticationEntryPoint" ref="authenticationEntryPoint" />
		<!--  <property name="accessDeniedHandler" ref="accessDeniedHandler" />-->
	</bean>

	<!-- Define AccessDesisionManager as UnanimousBased -->
	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
		<property name="allowIfAllAbstainDecisions" value="false"/>
		<property name="decisionVoters">
			<list>
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</property>
	</bean>

	<!-- Checking grants and enforcing security -->
 	<bean id="filterSecurityInterceptor"
			class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="accessDecisionManager" ref="accessDecisionManager" />
		<property name="securityMetadataSource">
            <security:filter-security-metadata-source>
            	 <security:intercept-url pattern="/login.jsp" access="ROLE_ANONYMOUS, ROLE_USER, ROLE_ADMIN"/>
                 <security:intercept-url pattern="/login" access="ROLE_ANONYMOUS, ROLE_USER, ROLE_ADMIN"/>
                 <security:intercept-url pattern="/logout" access="ROLE_USER, ROLE_ADMIN"/>
                 <security:intercept-url pattern="/*.jsp" access="ROLE_USER, ROLE_ADMIN"/>
                 <security:intercept-url pattern="/admin" access="ROLE_ADMIN"/>
                 <security:intercept-url pattern="/admin/edit_user" access="ROLE_ADMIN"/>
                 <security:intercept-url pattern="/admin/add_user" access="ROLE_ADMIN"/>
            </security:filter-security-metadata-source>
        </property>
	</bean>
	<!-- LDAP configurations -->
  <bean id="ldapAuthenticationProvider"
      class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider">   

    <!-- strategy for handling the actual authentication against the LDAP repository -->
    <constructor-arg ref="authenticator" />
    

    <!-- strategy for retrieving a user's set of granted authorities -->
    <constructor-arg ref="populator" />     
    
     <property name="userDetailsContextMapper" ref="ldapUserManager" />
</bean>

<bean id="authenticator"
      class="org.springframework.security.ldap.authentication.BindAuthenticator">
    <constructor-arg ref="contextSource" />
    <!--  how to find a user in LDAP -->
    <property name="userDnPatterns">
        <list>
	    <!-- {0} servers as a pattern argument placeholder for a username -->
	    <value>uid={0},ou=users</value>
	</list>
    </property>            
</bean>


	


<bean id="userSearch"
    class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
   	  <constructor-arg index="0" value="ou=users"/> 
      <constructor-arg index="1" value="(uid={0})"/> 
      <constructor-arg index="2" ref="contextSource" /> 

</bean> 
        


<bean id="contextSource"
    class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
   <constructor-arg value="ldap://${ldap.connection.host}:${ldap.connection.port}/${ldap.connection.rdn}" />

    <property name="userDn" value="${ldap.connection.userDn}" />
    <property name="password" value="${ldap.connection.password}" />
</bean>



<bean id="populator"	  
      class="org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator">
    <constructor-arg ref="contextSource" />    
    <constructor-arg value="ou=groups" />
    <property name="groupRoleAttribute" value="ou" />
    <property name="convertToUpperCase" value="true" />
    <property name="rolePrefix" value="ROLE_" />
    <property name="groupSearchFilter" value="uniqueMember={0}" />
    
 </bean> 
 
 <bean name="userService" class="com.healthcit.analytics.service.UserService" />
 
  <bean name="ldapUserManager" class="com.healthcit.analytics.service.LdapManager" >
   		<!--constructor-arg ref="contextSource"/-->   		
   </bean>
	
	<bean id="securityFilterChainBean" class="org.springframework.security.web.FilterChainProxy">
	
	
	
   <security:filter-chain-map path-type="ant" >
       <security:filter-chain pattern="/**" filters="httpSessionIntegrationFilter,authenticationProcessingFilter,securityContextHolderAwareRequestFilter,anonymousProcessingFilter,exceptionTranslationFilter,filterSecurityInterceptor" />
   </security:filter-chain-map>
   </bean>
</beans>
